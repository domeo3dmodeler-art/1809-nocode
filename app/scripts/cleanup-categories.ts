// scripts/cleanup-categories.ts
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanupCategories() {
  try {
    console.log('üßπ –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    const categories = await prisma.category.findMany({
      include: {
        _count: {
          select: {
            products: true,
            subcategories: true
          }
        }
      }
    });

    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    categories.forEach(cat => {
      console.log(`- ${cat.name} (${cat.slug}): —Ç–æ–≤–∞—Ä–æ–≤=${cat._count.products}, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π=${cat._count.subcategories}`);
    });

    // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const emptyCategories = categories.filter(cat => 
      cat._count.products === 0 && cat._count.subcategories === 0
    );

    if (emptyCategories.length === 0) {
      console.log('‚úÖ –ü—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${emptyCategories.length} –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:`);
    
    for (const category of emptyCategories) {
      console.log(`- –£–¥–∞–ª—è–µ–º: ${category.name} (${category.slug})`);
      await prisma.category.delete({
        where: { id: category.id }
      });
    }

    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanupCategories();
