'use client';

import Link from 'next/link';
import React, { useState } from 'react';

// –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
interface SmartItem {
  id: string;
  name: string;
  price: number;
  description: string;
  image?: string;
}

interface CartItem {
  id: string;
  item: SmartItem;
  quantity: number;
  totalPrice: number;
}

export default function SmartPage() {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [selectedClient, setSelectedClient] = useState<string>('');
  const [showClientModal, setShowClientModal] = useState(false);

  // –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ domeosmart.ru)
  const smartItems: SmartItem[] = [
    {
      id: '1',
      name: '–£–º–Ω–∞—è –ª–∞–º–ø–∞',
      price: 2500,
      description: 'LED –ª–∞–º–ø–∞ —Å Wi-Fi —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º',
      image: '/assets/smart/lamp.jpg'
    },
    {
      id: '2',
      name: '–£–º–Ω—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å',
      price: 3500,
      description: '–°–µ–Ω—Å–æ—Ä–Ω—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º',
      image: '/assets/smart/switch.jpg'
    },
    {
      id: '3',
      name: 'IP –∫–∞–º–µ—Ä–∞',
      price: 8500,
      description: '–ö–∞–º–µ—Ä–∞ —Å –Ω–æ—á–Ω—ã–º –≤–∏–¥–µ–Ω–∏–µ–º',
      image: '/assets/smart/camera.jpg'
    },
    {
      id: '4',
      name: '–î–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è',
      price: 1200,
      description: '–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –¥–∞—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è',
      image: '/assets/smart/sensor.jpg'
    },
    {
      id: '5',
      name: '–£–º–Ω—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç',
      price: 12000,
      description: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–π —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç',
      image: '/assets/smart/thermostat.jpg'
    },
    {
      id: '6',
      name: '–£–º–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞',
      price: 15000,
      description: '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫',
      image: '/assets/smart/speaker.jpg'
    }
  ];

  const addToCart = (item: SmartItem) => {
    const existingItem = cart.find(cartItem => cartItem.item.id === item.id);
    
    if (existingItem) {
      setCart(cart.map(cartItem => 
        cartItem.item.id === item.id 
          ? { ...cartItem, quantity: cartItem.quantity + 1, totalPrice: (cartItem.quantity + 1) * item.price }
          : cartItem
      ));
    } else {
      setCart([...cart, {
        id: Date.now().toString(),
        item,
        quantity: 1,
        totalPrice: item.price
      }]);
    }
  };

  const removeFromCart = (itemId: string) => {
    setCart(cart.filter(cartItem => cartItem.item.id !== itemId));
  };

  const updateQuantity = (itemId: string, quantity: number) => {
    if (quantity <= 0) {
      removeFromCart(itemId);
      return;
    }
    
    setCart(cart.map(cartItem => 
      cartItem.item.id === itemId 
        ? { ...cartItem, quantity, totalPrice: quantity * cartItem.item.price }
        : cartItem
    ));
  };

  const getTotalPrice = () => {
    return cart.reduce((total, item) => total + item.totalPrice, 0);
  };

  const checkClientBeforeExport = (exportFunction: () => void) => {
    if (!selectedClient) {
      setShowClientModal(true);
      return;
    }
    exportFunction();
  };

  const exportKP = () => {
    checkClientBeforeExport(() => {
      console.log('–≠–∫—Å–ø–æ—Ä—Ç –ö–ü –¥–ª—è –°–º–∞—Ä—Ç:', cart);
      alert('–ö–ü —Å–æ–∑–¥–∞–Ω!');
    });
  };

  const exportInvoice = () => {
    checkClientBeforeExport(() => {
      console.log('–≠–∫—Å–ø–æ—Ä—Ç —Å—á–µ—Ç–∞ –¥–ª—è –°–º–∞—Ä—Ç:', cart);
      alert('–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω!');
    });
  };

  const exportFactory = () => {
    checkClientBeforeExport(() => {
      console.log('–ó–∞–∫–∞–∑ –Ω–∞ —Ñ–∞–±—Ä–∏–∫—É –¥–ª—è –°–º–∞—Ä—Ç:', cart);
      alert('–ó–∞–∫–∞–∑ –Ω–∞ —Ñ–∞–±—Ä–∏–∫—É —Å–æ–∑–¥–∞–Ω!');
    });
  };

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white border-b border-black/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <Link href="/" className="text-2xl font-bold text-black">
                Domeo
              </Link>
              <span className="text-black text-lg font-bold">‚Ä¢</span>
              <span className="text-lg font-semibold text-black">–°–º–∞—Ä—Ç</span>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/dashboard"
                className="px-4 py-2 bg-black text-white hover:bg-yellow-400 hover:text-black transition-all duration-200 text-sm font-medium"
              >
                Dashboard
              </Link>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –¢–æ–≤–∞—Ä—ã */}
          <div className="lg:col-span-3">
            <div className="mb-6">
              <h1 className="text-2xl font-bold text-black mb-2">–ö–∞—Ç–∞–ª–æ–≥ –°–º–∞—Ä—Ç</h1>
              <p className="text-gray-600">
                –¢–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ domeosmart.ru
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {smartItems.map((item) => (
                <div key={item.id} className="bg-white border border-black/10 p-6 hover:border-black transition-all duration-200">
                  <div className="mb-4">
                    <h3 className="text-lg font-semibold text-black mb-2">{item.name}</h3>
                    <p className="text-gray-600 text-sm mb-3">{item.description}</p>
                    <div className="text-xl font-bold text-black mb-3">
                      {item.price.toLocaleString()} ‚ÇΩ
                    </div>
                  </div>

                  <button
                    onClick={() => addToCart(item)}
                    className="w-full px-4 py-2 bg-black text-white hover:bg-blue-600 transition-all duration-200 text-sm font-medium"
                  >
                    –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ö–æ—Ä–∑–∏–Ω–∞ */}
          <aside className="lg:col-span-1">
            <div className="bg-white border border-black/10 p-6 sticky top-8">
              <h2 className="text-lg font-semibold text-black mb-4">–ö–æ—Ä–∑–∏–Ω–∞</h2>
              
              {cart.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-4xl mb-4">üõí</div>
                  <p className="text-gray-600 text-sm">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {cart.map((cartItem) => (
                    <div key={cartItem.id} className="border border-gray-200 p-3 rounded">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="text-sm font-medium text-black">{cartItem.item.name}</h4>
                        <button
                          onClick={() => removeFromCart(cartItem.item.id)}
                          className="text-red-600 hover:text-red-800 text-xs"
                        >
                          ‚úï
                        </button>
                      </div>
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => updateQuantity(cartItem.item.id, cartItem.quantity - 1)}
                            className="w-6 h-6 bg-gray-200 text-gray-600 rounded text-xs"
                          >
                            -
                          </button>
                          <span className="text-sm text-black">{cartItem.quantity}</span>
                          <button
                            onClick={() => updateQuantity(cartItem.item.id, cartItem.quantity + 1)}
                            className="w-6 h-6 bg-gray-200 text-gray-600 rounded text-xs"
                          >
                            +
                          </button>
                        </div>
                        <div className="text-sm font-medium text-black">
                          {cartItem.totalPrice.toLocaleString()} ‚ÇΩ
                        </div>
                      </div>
                    </div>
                  ))}
                  
                  <div className="border-t border-gray-200 pt-4">
                    <div className="flex justify-between items-center mb-4">
                      <span className="text-lg font-semibold text-black">–ò—Ç–æ–≥–æ:</span>
                      <span className="text-lg font-bold text-black">
                        {getTotalPrice().toLocaleString()} ‚ÇΩ
                      </span>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
                    <div className="space-y-2">
                      <button
                        disabled={!cart.length}
                        onClick={exportKP}
                        className="w-full px-3 py-2 border border-black text-black hover:bg-black hover:text-white transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                      >
                        –ö–ü
                      </button>
                      <button
                        disabled={!cart.length}
                        onClick={exportInvoice}
                        className="w-full px-3 py-2 border border-black text-black hover:bg-black hover:text-white transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                      >
                        –°—á–µ—Ç
                      </button>
                      <button
                        disabled={!cart.length}
                        onClick={exportFactory}
                        className="w-full px-3 py-2 border border-black text-black hover:bg-black hover:text-white transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed text-sm"
                      >
                        –ó–∞–∫–∞–∑ –Ω–∞ —Ñ–∞–±—Ä–∏–∫—É
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </aside>
        </div>
      </main>

      {/* Client Selection Modal */}
      {showClientModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold text-black mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</h3>
            <p className="text-sm text-gray-600 mb-4">
              –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
            </p>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-black mb-2">–ö–ª–∏–µ–Ω—Ç</label>
                <select
                  value={selectedClient}
                  onChange={(e) => setSelectedClient(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 text-black focus:outline-none focus:ring-2 focus:ring-blue-400"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
                  <option value="1">–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</option>
                  <option value="2">–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞</option>
                  <option value="3">–°–∏–¥–æ—Ä–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á</option>
                </select>
              </div>
              
              <div className="flex space-x-3 pt-4">
                <button
                  onClick={() => setShowClientModal(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 transition-all duration-200 text-sm font-medium"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={() => {
                    if (selectedClient) {
                      setShowClientModal(false);
                      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    }
                  }}
                  disabled={!selectedClient}
                  className="flex-1 px-4 py-2 bg-black text-white hover:bg-blue-600 hover:text-white transition-all duration-200 text-sm font-medium disabled:opacity-50"
                >
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}