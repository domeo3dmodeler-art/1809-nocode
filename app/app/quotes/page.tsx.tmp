'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

interface Quote {
  id: string;
  number: string;
  clientId: string;
  clientName: string;
  status: 'draft' | 'sent' | 'accepted' | 'rejected';
  createdAt: string;
  validUntil: string;
  total: number;
  currency: string;
  discount: number;
  items: any[];
  notes?: string;

export default function QuotesPage() {
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [filter, setFilter] = useState<'all' | 'draft' | 'sent' | 'accepted' | 'rejected'>('all');
  const [selectedQuote, setSelectedQuote] = useState<Quote | null>(null);
  const [showForm, setShowForm] = useState(false);
  const [selectedQuotes, setSelectedQuotes] = useState<string[]>([]);
  const [showMergeModal, setShowMergeModal] = useState(false);
  const [mergeData, setMergeData] = useState({
    clientId: '',
    clientName: '',
    quotes: [] as Quote[]
  });
  const [formData, setFormData] = useState({
    clientId: '',
    clientName: '',
    discount: 0,
    notes: ''
  });

  // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ö–ü
  const demoQuotes: Quote[] = [
    {
      id: '1',
      number: 'KP-001',
      clientId: '1',
      clientName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
      status: 'sent',
      createdAt: '2024-01-15',
      validUntil: '2024-02-15',
      total: 125000,
      currency: 'RUB',
      discount: 10,
      items: [
        { name: '–î–≤–µ—Ä—å –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è', qty: 2, price: 50000 },
        { name: '–§—É—Ä–Ω–∏—Ç—É—Ä–∞', qty: 1, price: 25000 }
      ],
      notes: '–°–∫–∏–¥–∫–∞ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–∞'
    },
    {
      id: '2',
      number: 'KP-002',
      clientId: '2',
      clientName: '–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
      status: 'draft',
      createdAt: '2024-01-20',
      validUntil: '2024-02-20',
      total: 85000,
      currency: 'RUB',
      discount: 5,
      items: [
        { name: '–î–≤–µ—Ä—å –≤—Ö–æ–¥–Ω–∞—è', qty: 1, price: 85000 }
      ]
    },
    {
      id: '3',
      number: 'KP-003',
      clientId: '3',
      clientName: '–°–∏–¥–æ—Ä–æ–≤ –ü–µ—Ç—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á',
      status: 'accepted',
      createdAt: '2024-01-25',
      validUntil: '2024-02-25',
      total: 45000,
      currency: 'RUB',
      discount: 0,
      items: [
        { name: '–î–≤–µ—Ä—å –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è', qty: 1, price: 45000 }
      ]
  ];

  useEffect(() => {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      setQuotes(demoQuotes);
      setIsLoading(false);
    }, 1000);
  }, []);

  const filteredQuotes = filter === 'all' 
    ? quotes 
    : quotes.filter(quote => quote.status === filter);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'draft': return 'bg-gray-100 text-gray-800';
      case 'sent': return 'bg-blue-100 text-blue-800';
      case 'accepted': return 'bg-green-100 text-green-800';
      case 'rejected': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'accepted': return '–ü—Ä–∏–Ω—è—Ç';
      case 'rejected': return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
      default: return status;
  };

  const handleQuoteSelect = (quoteId: string) => {
    setSelectedQuotes(prev => 
      prev.includes(quoteId) 
        ? prev.filter(id => id !== quoteId)
        : [...prev, quoteId]
    );
  };

  const handleMergeQuotes = () => {
    if (selectedQuotes.length < 2) return;
    
    const quotesToMerge = quotes.filter(q => selectedQuotes.includes(q.id));
    const clientId = quotesToMerge[0].clientId;
    const clientName = quotesToMerge[0].clientName;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ö–ü –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –æ–¥–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    const allSameClient = quotesToMerge.every(q => q.clientId === clientId);
    
    if (!allSameClient) {
      alert('–ù–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –ö–ü —Ä–∞–∑–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
      return;
    
    setMergeData({
      clientId,
      clientName,
      quotes: quotesToMerge
    });
    setShowMergeModal(true);
  };

  const executeMerge = () => {
    if (mergeData.quotes.length < 2) return;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ö–ü
    const mergedQuote: Quote = {
      id: Date.now().toString(),
      number: `KP-MERGED-${String(quotes.length + 1).padStart(3, '0')}`,
      clientId: mergeData.clientId,
      clientName: mergeData.clientName,
      status: 'draft',
      createdAt: new Date().toISOString().split('T')[0],
      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      total: mergeData.quotes.reduce((sum, q) => sum + q.total, 0),
      currency: mergeData.quotes[0].currency,
      discount: Math.max(...mergeData.quotes.map(q => q.discount)),
      items: mergeData.quotes.flatMap(q => q.items),
      notes: `–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ö–ü –∏–∑: ${mergeData.quotes.map(q => q.number).join(', ')}`
    };
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ö–ü –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π
    setQuotes(prev => [
      ...prev.filter(q => !selectedQuotes.includes(q.id)),
      mergedQuote
    ]);
    
    setSelectedQuotes([]);
    setShowMergeModal(false);
    setMergeData({
      clientId: '',
      clientName: '',
      quotes: []
    });
  };

  const updateQuoteStatus = (quoteId: string, newStatus: Quote['status']) => {
    setQuotes(quotes.map(quote => 
      quote.id === quoteId 
        ? { ...quote, status: newStatus }
        : quote
    ));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const newQuote: Quote = {
      id: Date.now().toString(),
      number: `KP-${String(quotes.length + 1).padStart(3, '0')}`,
      clientId: formData.clientId,
      clientName: formData.clientName,
      status: 'draft',
      createdAt: new Date().toISOString().split('T')[0],
      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      total: 0,
      currency: 'RUB',
      discount: formData.discount,
      items: [],
      notes: formData.notes
    };

    setQuotes([...quotes, newQuote]);
    setShowForm(false);
    setFormData({
      clientId: '',
      clientName: '',
      discount: 0,
      notes: ''
    });
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-white flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ö–ü...</p>
        </div>
      </div>
    );

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <Link href="/dashboard" className="text-2xl font-bold text-black">
                Domeo
              </Link>
              <span className="text-black text-lg font-bold">‚Ä¢</span>
              <span className="text-lg font-semibold text-black">–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</span>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => setShowForm(true)}
                className="px-4 py-2 bg-black text-white hover:bg-yellow-400 hover:text-black transition-all duration-200 text-sm font-medium"
              >
                –°–æ–∑–¥–∞—Ç—å –ö–ü
              </button>
              {selectedQuotes.length >= 2 && (
                <button
                  onClick={handleMergeQuotes}
                  className="px-4 py-2 bg-yellow-400 text-black hover:bg-yellow-500 transition-all duration-200 text-sm font-medium"
                >
                  –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ö–ü ({selectedQuotes.length})
                </button>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–í—Å–µ–≥–æ –ö–ü</p>
                <p className="text-2xl font-bold text-black mt-1">{quotes.length}</p>
              </div>
              <div className="text-2xl">üìÑ</div>
            </div>
          </div>
          <div className="bg-white border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</p>
                <p className="text-2xl font-bold text-black mt-1">{quotes.filter(q => q.status === 'draft').length}</p>
              </div>
              <div className="text-2xl">üìù</div>
            </div>
          </div>
          <div className="bg-white border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ</p>
                <p className="text-2xl font-bold text-black mt-1">{quotes.filter(q => q.status === 'sent').length}</p>
              </div>
              <div className="text-2xl">üì§</div>
            </div>
          </div>
          <div className="bg-white border border-gray-200 p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–ü—Ä–∏–Ω—è—Ç—ã–µ</p>
                <p className="text-2xl font-bold text-black mt-1">{quotes.filter(q => q.status === 'accepted').length}</p>
              </div>
              <div className="text-2xl">‚úÖ</div>
            </div>
          </div>
        </div>

        {/* Filters */}
        <div className="mb-6">
          <div className="flex space-x-2">
            {[
              { key: 'all', label: '–í—Å–µ' },
              { key: 'draft', label: '–ß–µ—Ä–Ω–æ–≤–∏–∫–∏' },
              { key: 'sent', label: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ' },
              { key: 'accepted', label: '–ü—Ä–∏–Ω—è—Ç—ã–µ' },
              { key: 'rejected', label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ' }
            ].map(({ key, label }) => (
              <button
                key={key}
                onClick={() => setFilter(key as any)}
                className={`px-4 py-2 text-sm font-medium transition-all duration-200 ${
                  filter === key
                    ? 'bg-black text-white'
                    : 'bg-white border border-gray-300 text-gray-700 hover:bg-gray-50'
                }`}
              >
                {label}
              </button>
            ))}
          </div>
        </div>

        {/* Quotes Table */}
        <div className="bg-white border border-gray-200">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-black">–°–ø–∏—Å–æ–∫ –ö–ü</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <input
                      type="checkbox"
                      checked={selectedQuotes.length === filteredQuotes.length && filteredQuotes.length > 0}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setSelectedQuotes(filteredQuotes.map(q => q.id));
                        } else {
                          setSelectedQuotes([]);
                      }}
                      className="h-4 w-4 text-black focus:ring-yellow-400 border-gray-300 rounded"
                    />
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–ü</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–ö–ª–∏–µ–Ω—Ç</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ç–∞—Ç—É—Å</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—É–º–º–∞</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°–∫–∏–¥–∫–∞</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {filteredQuotes.map((quote) => (
                  <tr key={quote.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <input
                        type="checkbox"
                        checked={selectedQuotes.includes(quote.id)}
                        onChange={() => handleQuoteSelect(quote.id)}
                        className="h-4 w-4 text-black focus:ring-yellow-400 border-gray-300 rounded"
                      />
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-black">{quote.number}</div>
                        <div className="text-sm text-gray-500">{quote.createdAt}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-black">{quote.clientName}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(quote.status)}`}>
                        {getStatusText(quote.status)}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-black">
                        {quote.total.toLocaleString()} {quote.currency}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-black">{quote.discount}%</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-black">{quote.validUntil}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => setSelectedQuote(quote)}
                          className="text-black hover:text-yellow-400 transition-colors duration-200"
                        >
                          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                        </button>
                        {quote.status === 'draft' && (
                          <button
                            onClick={() => updateQuoteStatus(quote.id, 'sent')}
                            className="text-blue-600 hover:text-blue-800 transition-colors duration-200"
                          >
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                          </button>
                        )}
                        {quote.status === 'sent' && (
                          <button
                            onClick={() => updateQuoteStatus(quote.id, 'accepted')}
                            className="text-green-600 hover:text-green-800 transition-colors duration-200"
                          >
                            –ü—Ä–∏–Ω—è—Ç—å
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        {/* Quote Details Modal */}
        {selectedQuote && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-black">–ö–ü {selectedQuote.number}</h3>
                <button
                  onClick={() => setSelectedQuote(null)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ‚úï
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–ö–ª–∏–µ–Ω—Ç</label>
                    <p className="text-sm text-black">{selectedQuote.clientName}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–°—Ç–∞—Ç—É—Å</label>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(selectedQuote.status)}`}>
                      {getStatusText(selectedQuote.status)}
                    </span>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–°—É–º–º–∞</label>
                    <p className="text-sm text-black">{selectedQuote.total.toLocaleString()} {selectedQuote.currency}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–°–∫–∏–¥–∫–∞</label>
                    <p className="text-sm text-black">{selectedQuote.discount}%</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</label>
                    <p className="text-sm text-black">{selectedQuote.createdAt}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</label>
                    <p className="text-sm text-black">{selectedQuote.validUntil}</p>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-600 mb-2">–ü–æ–∑–∏—Ü–∏–∏ –ö–ü</label>
                  <div className="space-y-2">
                    {selectedQuote.items.map((item, index) => (
                      <div key={index} className="flex justify-between items-center p-3 bg-gray-50">
                        <div>
                          <p className="text-sm font-medium text-black">{item.name}</p>
                          <p className="text-xs text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.qty}</p>
                        </div>
                        <p className="text-sm text-black">{item.price.toLocaleString()} {selectedQuote.currency}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {selectedQuote.notes && (
                  <div>
                    <label className="block text-sm font-medium text-gray-600">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</label>
                    <p className="text-sm text-black">{selectedQuote.notes}</p>
                  </div>
                )}

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={() => setSelectedQuote(null)}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 transition-all duration-200 text-sm font-medium"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                  {selectedQuote.status === 'draft' && (
                    <button
                      onClick={() => {
                        updateQuoteStatus(selectedQuote.id, 'sent');
                        setSelectedQuote(null);
                      }}
                      className="flex-1 px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 transition-all duration-200 text-sm font-medium"
                    >
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </button>
                  )}
                  {selectedQuote.status === 'sent' && (
                    <button
                      onClick={() => {
                        updateQuoteStatus(selectedQuote.id, 'accepted');
                        setSelectedQuote(null);
                      }}
                      className="flex-1 px-4 py-2 bg-green-600 text-white hover:bg-green-700 transition-all duration-200 text-sm font-medium"
                    >
                      –ü—Ä–∏–Ω—è—Ç—å
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Create Quote Form */}
        {showForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 w-full max-w-md mx-4">
              <h3 className="text-lg font-semibold text-black mb-4">–°–æ–∑–¥–∞—Ç—å –ö–ü</h3>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-black mb-1">–ö–ª–∏–µ–Ω—Ç *</label>
                  <input
                    type="text"
                    required
                    value={formData.clientName}
                    onChange={(e) => setFormData({ ...formData, clientName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 text-black focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-black mb-1">–°–∫–∏–¥–∫–∞ (%)</label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    value={formData.discount}
                    onChange={(e) => setFormData({ ...formData, discount: Number(e.target.value) })}
                    className="w-full px-3 py-2 border border-gray-300 text-black focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    placeholder="0"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-black mb-1">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</label>
                  <textarea
                    value={formData.notes}
                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 text-black focus:outline-none focus:ring-2 focus:ring-yellow-400"
                    rows={3}
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                  />
                </div>
                <div className="flex space-x-3 pt-4">
                  <button
                    type="submit"
                    className="flex-1 px-4 py-2 bg-black text-white hover:bg-yellow-400 hover:text-black transition-all duration-200 text-sm font-medium"
                  >
                    –°–æ–∑–¥–∞—Ç—å
                  </button>
                  <button
                    type="button"
                    onClick={() => {
                      setShowForm(false);
                      setFormData({
                        clientId: '',
                        clientName: '',
                        discount: 0,
                        notes: ''
                      });
                    }}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 transition-all duration-200 text-sm font-medium"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </form>
            </div>
          </div>
        {/* Merge Quotes Modal */}
        {showMergeModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-black">–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ö–ü</h3>
                <button
                  onClick={() => setShowMergeModal(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  ‚úï
                </button>
              </div>
              
              <div className="space-y-4">
                <div className="p-4 bg-gray-50 rounded">
                  <h4 className="font-medium text-black mb-2">–ö–ª–∏–µ–Ω—Ç: {mergeData.clientName}</h4>
                  <p className="text-sm text-gray-600">–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ö–ü –∏–∑ {mergeData.quotes.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
                </div>

                <div>
                  <h4 className="font-medium text-black mb-2">–ö–ü –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è:</h4>
                  <div className="space-y-2">
                    {mergeData.quotes.map((quote) => (
                      <div key={quote.id} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                        <div>
                          <p className="text-sm font-medium text-black">{quote.number}</p>
                          <p className="text-xs text-gray-500">{quote.createdAt}</p>
                        </div>
                        <p className="text-sm text-black">{quote.total.toLocaleString()} {quote.currency}</p>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-600 mb-1">–û–±—â–∞—è —Å—É–º–º–∞</label>
                    <p className="text-lg font-semibold text-black">
                      {mergeData.quotes.reduce((sum, q) => sum + q.total, 0).toLocaleString()} {mergeData.quotes[0]?.currency}
                    </p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-600 mb-1">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞</label>
                    <p className="text-lg font-semibold text-black">
                      {Math.max(...mergeData.quotes.map(q => q.discount))}%
                    </p>
                  </div>
                </div>

                <div className="flex space-x-3 pt-4">
                  <button
                    onClick={() => setShowMergeModal(false)}
                    className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 hover:bg-gray-50 transition-all duration-200 text-sm font-medium"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button
                    onClick={executeMerge}
                    className="flex-1 px-4 py-2 bg-yellow-400 text-black hover:bg-yellow-500 transition-all duration-200 text-sm font-medium"
                  >
                    –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ö–ü
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
