import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
const completeDataCache = new Map<string, { data: any, timestamp: number }>();
const CACHE_TTL = 60 * 60 * 1000; // 1 —á–∞—Å

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const style = searchParams.get('style');

    const cacheKey = style || 'all';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = completeDataCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      console.log('‚úÖ API complete-data - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à');
      return NextResponse.json({
        ok: true,
        ...cached.data,
        cached: true
      });
    }

    console.log('üîç API complete-data - –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∏–ª—è:', style || '–≤—Å–µ');

    // –û–¥–∏–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
    const products = await prisma.product.findMany({
      where: {
        catalog_category: {
          name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
        },
        is_active: true
      },
      select: {
        properties_data: true
      },
      orderBy: {
        created_at: 'desc'
      },
      take: 5000 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    });

    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é –≤ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    const filteredProducts = style ? 
      products.filter(product => {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
        return properties['Domeo_–°—Ç–∏–ª—å Web'] === style;
      }) : 
      products;

    console.log(`üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é "${style || '–≤—Å–µ'}": ${filteredProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
    const modelMap = new Map<string, { 
      model: string, 
      style: string, 
      photo: string | null,
      options: any
    }>();

    const photoMap = new Map<string, string[]>(); // –∞—Ä—Ç–∏–∫—É–ª -> —Ñ–æ—Ç–æ[]

    filteredProducts.forEach(product => {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      const model = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
      const productStyle = properties['Domeo_–°—Ç–∏–ª—å Web'];
      const productArticle = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
      const productPhotos = properties.photos || [];

      if (model && productStyle) {
        // –°–æ–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        if (productArticle && productPhotos.length > 0) {
          if (!photoMap.has(productArticle)) {
            photoMap.set(productArticle, []);
          }
          photoMap.get(productArticle)!.push(...productPhotos);
        }

        // –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª–∏
        if (!modelMap.has(model)) {
          modelMap.set(model, {
            model,
            style: productStyle,
            photo: null, // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
            options: {
              finishes: new Set(),
              colors: new Set(),
              types: new Set(),
              widths: new Set(),
              heights: new Set()
            }
          });
        }

        const modelData = modelMap.get(model)!;
        
        // –°–æ–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏
        if (properties['Domeo_–ü–æ–∫—Ä—ã—Ç–∏–µ Web']) modelData.options.finishes.add(properties['Domeo_–ü–æ–∫—Ä—ã—Ç–∏–µ Web']);
        if (properties['Domeo_–¶–≤–µ—Ç Web']) modelData.options.colors.add(properties['Domeo_–¶–≤–µ—Ç Web']);
        if (properties['Domeo_–¢–∏–ø Web']) modelData.options.types.add(properties['Domeo_–¢–∏–ø Web']);
        if (properties['Domeo_–®–∏—Ä–∏–Ω–∞ Web']) modelData.options.widths.add(properties['Domeo_–®–∏—Ä–∏–Ω–∞ Web']);
        if (properties['Domeo_–í—ã—Å–æ—Ç–∞ Web']) modelData.options.heights.add(properties['Domeo_–í—ã—Å–æ—Ç–∞ Web']);
      }
    });

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∫ –º–æ–¥–µ–ª—è–º
    const models = Array.from(modelMap.values()).map(modelData => {
      // –ò—â–µ–º —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
      const modelProducts = filteredProducts.filter(p => {
        const props = p.properties_data ? 
          (typeof p.properties_data === 'string' ? JSON.parse(p.properties_data) : p.properties_data) : {};
        return props['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'] === modelData.model;
      });

      let photo = null;
      for (const product of modelProducts) {
        const props = product.properties_data ? 
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};
        const article = props['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
        if (article && photoMap.has(article)) {
          photo = photoMap.get(article)![0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
          break;
        }
      }

      return {
        ...modelData,
        photo,
        options: {
          finishes: Array.from(modelData.options.finishes),
          colors: Array.from(modelData.options.colors),
          types: Array.from(modelData.options.types),
          widths: Array.from(modelData.options.widths),
          heights: Array.from(modelData.options.heights)
        }
      };
    }).sort((a, b) => a.model.localeCompare(b.model));

    const result = {
      models,
      totalModels: models.length,
      styles: Array.from(new Set(models.map(m => m.style))),
      timestamp: Date.now()
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∏–ª—è
    completeDataCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    });

    // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∏–ª—è
    if (!style) {
      const allModels = models;
      const styles = Array.from(new Set(allModels.map(m => m.style)));
      
      styles.forEach(styleName => {
        const styleModels = allModels.filter(m => m.style === styleName);
        completeDataCache.set(styleName, {
          data: {
            models: styleModels,
            totalModels: styleModels.length,
            styles: [styleName],
            timestamp: Date.now()
          },
          timestamp: Date.now()
        });
      });
    }

    console.log(`‚úÖ API complete-data - –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ç–∏–ª—è ${style || '–≤—Å–µ'}`);

    return NextResponse.json({
      ok: true,
      ...result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API complete-data:', error);
    return NextResponse.json(
      { error: 'Failed to fetch complete data', details: (error as Error).message },
      { status: 500 }
    );
  }
}
