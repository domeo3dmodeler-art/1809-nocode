import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// –ö—ç—à –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const photosCache = new Map<string, { photos: string[], timestamp: number }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç

// –ö—ç—à –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∫–∞–∂–¥—ã–π —Ä–∞–∑)
let allProductsCache: any[] | null = null;
let allProductsCacheTimestamp = 0;
const ALL_PRODUCTS_CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);
    const model = searchParams.get('model');
    const style = searchParams.get('style');

    if (!model) {
      return NextResponse.json(
        { error: "–ù–µ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${model}_${style || 'all'}`;
    const cached = photosCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return NextResponse.json({
        ok: true,
        model,
        style,
        photos: cached.photos,
        count: cached.photos.length,
        cached: true
      });
    }

    console.log('üîç API photos - –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏:', model);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏–∑ –ë–î
    let products;
    if (allProductsCache && Date.now() - allProductsCacheTimestamp < ALL_PRODUCTS_CACHE_TTL) {
      console.log('üì¶ API photos - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ç–æ–≤–∞—Ä–æ–≤');
      products = allProductsCache;
    } else {
      console.log('üì¶ API photos - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î');
      products = await prisma.product.findMany({
        where: {
          catalog_category: {
            name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
          }
        },
        select: {
          id: true,
          sku: true,
          name: true,
          properties_data: true
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      allProductsCache = products;
      allProductsCacheTimestamp = Date.now();
      console.log('üì¶ API photos - —Ç–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');
    }

    // –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    const photos: string[] = [];
    const seenArticles = new Set<string>();

    for (const product of products) {
      const properties = product.properties_data ?
        (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

      const productModel = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
      const productArticle = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
      const productPhotos = properties.photos || [];

      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
      if (productModel === model && productPhotos.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model} —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${productArticle} –∏ ${productPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if (productArticle && !seenArticles.has(productArticle)) {
          seenArticles.add(productArticle);

          // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
          if (productPhotos.length > 0) {
            console.log(`üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${productArticle}: ${productPhotos[0]}`);
            photos.push(productPhotos[0]);
          }
        }

        break; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    if (photos.length === 0) {
      for (const product of products) {
        const properties = product.properties_data ?
          (typeof product.properties_data === 'string' ? JSON.parse(product.properties_data) : product.properties_data) : {};

        const productModel = properties['Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web'];
        const productArticle = properties['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'];
        const productPhotos = properties.photos || [];

        // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–æ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
        if (productModel && productModel.includes(model) && productPhotos.length > 0) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å ${model} (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ) —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${productArticle} –∏ ${productPhotos.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏`);

          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
          if (productArticle && !seenArticles.has(productArticle)) {
            seenArticles.add(productArticle);

            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            if (productPhotos.length > 0) {
              console.log(`üì∏ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞ ${productArticle}: ${productPhotos[0]}`);
              photos.push(productPhotos[0]);
            }
          }

          break;
        }
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    photosCache.set(cacheKey, {
      photos,
      timestamp: Date.now()
    });

    return NextResponse.json({
      ok: true,
      model,
      style,
      photos,
      count: photos.length,
      cached: false
    });
  } catch (error) {
    console.error('‚ùå API photos - –û–®–ò–ë–ö–ê:', error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", details: (error as Error).message },
      { status: 500 }
    );
  }
}
