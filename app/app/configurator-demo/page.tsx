'use client'
import React, { useState } from 'react';

type Product = {
  id: string;
  name: string;
  price: number;
  description: string;
  image?: string;
};

type SubcategoryProduct = {
  id: string;
  name: string;
  price: number;
  description: string;
  image?: string;
};

type Subcategory = {
  id: string;
  name: string;
  description: string;
  icon: string;
  products: SubcategoryProduct[];
};

type Category = {
  id: string;
  name: string;
  description: string;
  icon: string;
  products: Product[];
  subcategories: Subcategory[];
};

export default function ConfiguratorDemo() {
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [selectedSubcategoryProducts, setSelectedSubcategoryProducts] = useState<Record<string, SubcategoryProduct | null>>({});
  const [totalPrice, setTotalPrice] = useState(0);

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
  const categories: Category[] = [
    {
      id: 'doors',
      name: '–î–≤–µ—Ä–∏',
      description: '–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏',
      icon: 'üö™',
      products: [
        { id: 'door-1', name: 'PG Base 1', price: 25000, description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–≤–µ—Ä—å –∏–∑ –º–∞—Å—Å–∏–≤–∞' },
        { id: 'door-2', name: 'PO Base 1/1', price: 28000, description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å —Å —ç–º–∞–ª—å—é' },
        { id: 'door-3', name: 'Neo-1', price: 32000, description: '–ù–µ–æ–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å' }
      ],
      subcategories: [
        {
          id: 'door-handles',
          name: '–†—É—á–∫–∏',
          description: '–†—É—á–∫–∏ –¥–ª—è –¥–≤–µ—Ä–µ–π',
          icon: 'üîò',
          products: [
            { id: 'handle-1', name: 'Pro', price: 1200, description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä—É—á–∫–∞' },
            { id: 'handle-2', name: 'Silver', price: 1400, description: '–°–µ—Ä–µ–±—Ä—è–Ω–∞—è —Ä—É—á–∫–∞' },
            { id: 'handle-3', name: 'Gold', price: 1600, description: '–ó–æ–ª–æ—Ç–∞—è —Ä—É—á–∫–∞' }
          ]
        },
        {
          id: 'door-kits',
          name: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
          description: '–ö–æ–º–ø–ª–µ–∫—Ç—ã —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã',
          icon: 'üîß',
          products: [
            { id: 'kit-1', name: '–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç', price: 5000, description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞' },
            { id: 'kit-2', name: 'SoftClose', price: 2400, description: '–ö–æ–º–ø–ª–µ–∫—Ç —Å –ø–ª–∞–≤–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º' },
            { id: 'kit-3', name: 'Premium', price: 8000, description: '–ü—Ä–µ–º–∏—É–º –∫–æ–º–ø–ª–µ–∫—Ç' }
          ]
        }
      ]
    },
    {
      id: 'flooring',
      name: '–ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è',
      description: '–õ–∞–º–∏–Ω–∞—Ç –∏ –ø–∞—Ä–∫–µ—Ç',
      icon: 'üè†',
      products: [
        { id: 'floor-1', name: '–õ–∞–º–∏–Ω–∞—Ç Premium', price: 1500, description: '–õ–∞–º–∏–Ω–∞—Ç 32 –∫–ª–∞—Å—Å–∞' },
        { id: 'floor-2', name: '–ü–∞—Ä–∫–µ—Ç –î—É–±', price: 3500, description: '–ú–∞—Å—Å–∏–≤ –¥—É–±–∞' }
      ],
      subcategories: [
        {
          id: 'flooring-accessories',
          name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
          description: '–ü–ª–∏–Ω—Ç—É—Å—ã –∏ –ø–æ—Ä–æ–≥–∏',
          icon: 'üìè',
          products: [
            { id: 'accessory-1', name: '–ü–ª–∏–Ω—Ç—É—Å –ú–î–§', price: 300, description: '–ü–ª–∏–Ω—Ç—É—Å –∏–∑ –ú–î–§' },
            { id: 'accessory-2', name: '–ü–æ—Ä–æ–≥ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π', price: 500, description: '–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–π –ø–æ—Ä–æ–≥' }
          ]
        }
      ]
    }
  ];

  const calculateTotalPrice = () => {
    let total = selectedProduct?.price || 0;
    Object.values(selectedSubcategoryProducts).forEach(product => {
      if (product) total += product.price;
    });
    setTotalPrice(total);
  };

  React.useEffect(() => {
    calculateTotalPrice();
  }, [selectedProduct, selectedSubcategoryProducts]);

  const handleProductSelect = (product: Product) => {
    setSelectedProduct(product);
    setSelectedSubcategoryProducts({});
  };

  const handleSubcategoryProductSelect = (subcategoryId: string, product: SubcategoryProduct) => {
    setSelectedSubcategoryProducts(prev => ({
      ...prev,
      [subcategoryId]: product
    }));
  };

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div>
                <h1 className="text-xl font-bold text-gray-900">Domeo</h1>
                <p className="text-xs text-gray-600">Configurators</p>
              </div>
            </div>
            <div className="flex-1 text-center">
              <h2 className="text-lg font-semibold text-gray-800">–î–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</h2>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-gray-900">{totalPrice.toLocaleString()} ‚ÇΩ</div>
              <div className="text-sm text-gray-500">–ò—Ç–æ–≥–æ</div>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="lg:col-span-1">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</h3>
            <div className="space-y-3">
              {categories.map(category => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category)}
                  className={`w-full p-4 rounded-lg border text-left transition-all ${
                    selectedCategory?.id === category.id
                      ? 'border-gray-800 bg-gray-50'
                      : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <div className="flex items-center">
                    <span className="text-2xl mr-3">{category.icon}</span>
                    <div>
                      <div className="font-medium text-gray-900">{category.name}</div>
                      <div className="text-sm text-gray-500">{category.description}</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ */}
          <div className="lg:col-span-1">
            {selectedCategory && (
              <>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ {selectedCategory.name.toLowerCase()}</h3>
                <div className="space-y-3">
                  {selectedCategory.products.map(product => (
                    <button
                      key={product.id}
                      onClick={() => handleProductSelect(product)}
                      className={`w-full p-4 rounded-lg border text-left transition-all ${
                        selectedProduct?.id === product.id
                          ? 'border-gray-800 bg-gray-50'
                          : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <div className="font-medium text-gray-900">{product.name}</div>
                          <div className="text-sm text-gray-500">{product.description}</div>
                        </div>
                        <div className="text-right">
                          <div className="font-semibold text-gray-900">{product.price.toLocaleString()} ‚ÇΩ</div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </>
            )}
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="lg:col-span-1">
            {selectedCategory && selectedProduct && (
              <>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</h3>
                <div className="space-y-6">
                  {selectedCategory.subcategories.map(subcategory => (
                    <div key={subcategory.id} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-center mb-3">
                        <span className="text-xl mr-2">{subcategory.icon}</span>
                        <div>
                          <div className="font-medium text-gray-900">{subcategory.name}</div>
                          <div className="text-sm text-gray-500">{subcategory.description}</div>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        {subcategory.products.map(product => (
                          <button
                            key={product.id}
                            onClick={() => handleSubcategoryProductSelect(subcategory.id, product)}
                            className={`w-full p-3 rounded border text-left transition-all ${
                              selectedSubcategoryProducts[subcategory.id]?.id === product.id
                                ? 'border-gray-800 bg-gray-50'
                                : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                            }`}
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <div className="font-medium text-gray-900">{product.name}</div>
                                <div className="text-sm text-gray-500">{product.description}</div>
                              </div>
                              <div className="text-right">
                                <div className="font-semibold text-gray-900">{product.price.toLocaleString()} ‚ÇΩ</div>
                              </div>
                            </div>
                          </button>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              </>
            )}
          </div>
        </div>

        {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
        {selectedProduct && (
          <div className="mt-8 bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</h3>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">{selectedProduct.name}</span>
                <span className="font-medium">{selectedProduct.price.toLocaleString()} ‚ÇΩ</span>
              </div>
              {Object.entries(selectedSubcategoryProducts).map(([subcategoryId, product]) => {
                if (!product) return null;
                const subcategory = selectedCategory?.subcategories.find(s => s.id === subcategoryId);
                return (
                  <div key={subcategoryId} className="flex justify-between">
                    <span className="text-gray-600">{subcategory?.name}: {product.name}</span>
                    <span className="font-medium">{product.price.toLocaleString()} ‚ÇΩ</span>
                  </div>
                );
              })}
              <div className="border-t border-gray-300 pt-2 mt-2">
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-900">–ò—Ç–æ–≥–æ:</span>
                  <span className="font-bold text-xl text-gray-900">{totalPrice.toLocaleString()} ‚ÇΩ</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}
