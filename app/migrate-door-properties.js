const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–≤–æ–π—Å—Ç–≤ –¥–≤–µ—Ä–µ–π
 * 
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –ë–î —Å —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –Ω–æ–≤—ã–µ (UI –Ω–∞–∑–≤–∞–Ω–∏—è)
 * 
 * –°—Ç–∞—Ä—ã–µ ‚Üí –ù–æ–≤—ã–µ:
 * - 'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web' ‚Üí '–ú–û–î–ï–õ–¨'
 * - 'Domeo_–°—Ç–∏–ª—å Web' ‚Üí '–°–¢–ò–õ–¨'
 * - '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è' ‚Üí '–¢–ò–ü –ü–û–ö–†–´–¢–ò–Ø'
 * - 'Domeo_–¶–≤–µ—Ç' ‚Üí '–¶–í–ï–¢_DOMEO'
 */

async function migrateDoorProperties() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–≤–æ–π—Å—Ç–≤ –¥–≤–µ—Ä–µ–π...\n');
    
    // 1. –ù–∞–π–¥–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const doorsCategory = await prisma.catalogCategory.findFirst({
      where: {
        name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
      }
    });

    if (!doorsCategory) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${doorsCategory.name} (ID: ${doorsCategory.id})\n`);

    // 2. –ü–æ–ª—É—á–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const doors = await prisma.product.findMany({
      where: {
        catalog_category_id: doorsCategory.id
      },
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${doors.length}\n`);

    if (doors.length === 0) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // 3. –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –Ω–æ–≤—ã–µ
    const propertyMapping = {
      'Domeo_–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Web': '–ú–û–î–ï–õ–¨',
      'Domeo_–°—Ç–∏–ª—å Web': '–°–¢–ò–õ–¨',
      '–û–±—â–µ–µ_–¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è': '–¢–ò–ü –ü–û–ö–†–´–¢–ò–Ø',
      'Domeo_–¶–≤–µ—Ç': '–¶–í–ï–¢_DOMEO'
    };

    let migratedCount = 0;
    let errorCount = 0;

    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤...\n');

    // 4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for (let i = 0; i < doors.length; i++) {
      const door = doors[i];
      
      try {
        // –ü–∞—Ä—Å–∏–º properties_data
        let properties = {};
        if (door.properties_data) {
          if (typeof door.properties_data === 'string') {
            properties = JSON.parse(door.properties_data);
          } else {
            properties = door.properties_data;
          }
        }

        let hasChanges = false;
        const newProperties = { ...properties };

        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        Object.entries(propertyMapping).forEach(([oldKey, newKey]) => {
          if (properties[oldKey] !== undefined) {
            newProperties[newKey] = properties[oldKey];
            delete newProperties[oldKey];
            hasChanges = true;
          }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (hasChanges) {
          await prisma.product.update({
            where: { id: door.id },
            data: { properties_data: JSON.stringify(newProperties) }
          });
          
          migratedCount++;
          
          // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤
          if (migratedCount % 100 === 0) {
            console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${migratedCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
          }
        }

      } catch (error) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${door.sku}:`, error.message);
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:');
    console.log('='.repeat(60));
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${doors.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${migratedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((migratedCount / doors.length) * 100).toFixed(1)}%`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

    const sampleDoors = await prisma.product.findMany({
      where: {
        catalog_category_id: doorsCategory.id
      },
      take: 3,
      select: {
        id: true,
        sku: true,
        properties_data: true
      }
    });

    console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤:');
    sampleDoors.forEach((door, index) => {
      const properties = door.properties_data ? 
        (typeof door.properties_data === 'string' ? JSON.parse(door.properties_data) : door.properties_data) : {};
      
      console.log(`\n${index + 1}. –¢–æ–≤–∞—Ä ${door.sku}:`);
      Object.entries(propertyMapping).forEach(([oldKey, newKey]) => {
        const hasOld = properties[oldKey] !== undefined;
        const hasNew = properties[newKey] !== undefined;
        const status = hasNew ? '‚úÖ' : hasOld ? '‚ùå' : '‚ö™';
        console.log(`   ${status} ${newKey}: ${hasNew ? properties[newKey] : hasOld ? properties[oldKey] : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
      });
    });

    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç—å API endpoints (—É–∂–µ —Å–¥–µ–ª–∞–Ω–æ)');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–≤–µ—Ä–µ–π');
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateDoorProperties();

