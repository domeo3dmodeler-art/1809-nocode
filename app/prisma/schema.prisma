// Prisma схема для SQLite (локальная разработка)
// Упрощенная версия для быстрого старта

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./prisma/dev.db"
}

// ===========================================
// ПОЛЬЗОВАТЕЛИ И АУТЕНТИФИКАЦИЯ
// ===========================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password_hash String
  first_name    String
  last_name     String
  middle_name   String?
  role          String    @default("admin") // admin, complectator, executor
  is_active     Boolean   @default(true)
  last_login    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("users")
}

// ===========================================
// КЛИЕНТЫ
// ===========================================

model Client {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  company      String?
  address      String?
  tax_number   String?
  notes        String?
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@map("clients")
}

// ===========================================
// КАТАЛОГ ТОВАРОВ (дерево категорий)
// ===========================================

model CatalogCategory {
  id             String   @id @default(cuid())
  name           String
  parent_id      String?
  level          Int      @default(0)
  path           String   // Полный путь категории (например: "1/2/3")
  sort_order     Int      @default(0)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  // Связи
  products       Product[]
  subcategories  CatalogCategory[] @relation("CatalogHierarchy")
  parent         CatalogCategory? @relation("CatalogHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  
  // Связи с другими таблицами
  property_assignments CategoryPropertyAssignment[]
  import_templates     ImportTemplate[]
  export_settings      ExportSetting[]
  configurator_links   ConfiguratorCategoryLink[]
  parent_hierarchies   AdditionalCategoryHierarchy[] @relation("ParentCategory")
  child_hierarchies    AdditionalCategoryHierarchy[] @relation("ChildCategory")

  @@map("catalog_categories")
  @@index([parent_id])
  @@index([path])
}

// ===========================================
// СВОЙСТВА ТОВАРОВ (из загружаемых файлов)
// ===========================================

model ProductProperty {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String   // text, number, select, boolean, date, file
  description String?
  options     String?  // JSON для select полей
  is_required Boolean  @default(false)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Связи
  category_assignments CategoryPropertyAssignment[]

  @@map("product_properties")
}

// ===========================================
// СВЯЗЬ СВОЙСТВ С КАТЕГОРИЯМИ КАТАЛОГА
// ===========================================

model CategoryPropertyAssignment {
  id                  String   @id @default(cuid())
  catalog_category_id String
  product_property_id String
  is_required         Boolean  @default(false)
  is_for_calculator   Boolean  @default(false)
  is_for_export       Boolean  @default(false)
  sort_order          Int      @default(0)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  // Связи
  catalog_category CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)
  product_property ProductProperty @relation(fields: [product_property_id], references: [id], onDelete: Cascade)

  @@map("category_property_assignments")
  @@unique([catalog_category_id, product_property_id])
}

// ===========================================
// ШАБЛОНЫ ЗАГРУЗКИ ДЛЯ КАТЕГОРИЙ
// ===========================================

model ImportTemplate {
  id                  String   @id @default(cuid())
  catalog_category_id String
  name                String
  required_fields     String   @default("[]") // JSON массив обязательных полей
  calculator_fields   String   @default("[]") // JSON массив полей для калькулятора
  export_fields       String   @default("[]") // JSON массив полей для экспорта
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  // Связи
  catalog_category CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@map("import_templates")
}

// ===========================================
// СВЯЗИ КАТЕГОРИЙ В КОНФИГУРАТОРЕ
// ===========================================

model ConfiguratorCategoryLink {
  id                      String   @id @default(cuid())
  configurator_category_id String
  catalog_category_id     String
  link_type               String   // 'main' | 'additional'
  display_order           Int      @default(0)
  is_required             Boolean  @default(false)
  pricing_type            String   // 'separate' | 'included' | 'formula'
  formula                 String?  // формула расчета (например, "price * 1.1")
  export_as_separate      Boolean  @default(true)
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  
  // Связи
  configurator_category FrontendCategory @relation(fields: [configurator_category_id], references: [id], onDelete: Cascade)
  catalog_category      CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)
  hierarchies           AdditionalCategoryHierarchy[]

  @@map("configurator_category_links")
  @@unique([configurator_category_id, catalog_category_id])
}

// ===========================================
// ИЕРАРХИЯ ДОПОЛНИТЕЛЬНЫХ КАТЕГОРИЙ
// ===========================================

model AdditionalCategoryHierarchy {
  id                    String   @id @default(cuid())
  configurator_link_id  String
  parent_category_id    String
  child_category_id     String
  display_order         Int      @default(0)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  // Связи
  configurator_link ConfiguratorCategoryLink @relation(fields: [configurator_link_id], references: [id], onDelete: Cascade)
  parent_category   CatalogCategory @relation("ParentCategory", fields: [parent_category_id], references: [id], onDelete: Cascade)
  child_category    CatalogCategory @relation("ChildCategory", fields: [child_category_id], references: [id], onDelete: Cascade)

  @@map("additional_category_hierarchies")
  @@unique([configurator_link_id, parent_category_id, child_category_id])
}

// ===========================================
// НАСТРОЙКИ ЭКСПОРТА ДЛЯ КАТЕГОРИЙ
// ===========================================

model ExportSetting {
  id                  String   @id @default(cuid())
  catalog_category_id String
  export_type         String   // quote, invoice, supplier_order
  fields_config       String   @default("[]") // JSON конфигурация полей
  display_config      String   @default("{}") // JSON настройки отображения
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  // Связи
  catalog_category CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@map("export_settings")
  @@unique([catalog_category_id, export_type])
}

// ===========================================
// КАТЕГОРИИ ФРОНТА (могут объединять несколько узлов каталога)
// ===========================================

model FrontendCategory {
  id                  String   @id @default(cuid())
  name                String
  slug                String   @unique
  description         String?
  icon                String?
  catalog_category_ids String  @default("[]") // JSON массив ID узлов каталога
  display_config      String   @default("{}") // JSON конфигурация отображения
  is_active           Boolean  @default(true)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Связи
  category_links ConfiguratorCategoryLink[]

  @@map("frontend_categories")
  @@index([slug])
}

// ===========================================
// ТОВАРЫ
// ===========================================

model Product {
  id                  String   @id @default(cuid())
  catalog_category_id String
  sku                 String   @unique
  name                String
  description         String?
  brand               String?
  model               String?
  series              String?
  base_price          Float
  currency            String   @default("RUB")
  stock_quantity      Int      @default(0)
  min_order_qty       Int      @default(1)
  weight              Float?
  dimensions          String   @default("{}") // JSON as string for SQLite
  specifications      String   @default("{}") // JSON as string for SQLite
  properties_data     String   @default("{}") // JSON данные свойств товара
  tags                String   @default("[]") // JSON as string for SQLite
  is_active           Boolean  @default(true)
  is_featured         Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Связи
  catalog_category    CatalogCategory @relation(fields: [catalog_category_id], references: [id], onDelete: Cascade)

  @@map("products")
}

// ===========================================
// ИЗОБРАЖЕНИЯ ТОВАРОВ
// ===========================================

model ProductImage {
  id          String   @id @default(cuid())
  product_id  String
  filename    String
  original_name String
  url         String
  alt_text    String?
  width       Int?
  height      Int?
  file_size   Int?
  mime_type   String
  is_primary  Boolean  @default(false)
  sort_order  Int      @default(0)
  created_at  DateTime @default(now())

  @@map("product_images")
}

// ===========================================
// КОММЕРЧЕСКИЕ ПРЕДЛОЖЕНИЯ
// ===========================================

model Quote {
  id              String      @id @default(cuid())
  number          String      @unique
  client_id       String
  created_by      String
  status          String      @default("DRAFT") // DRAFT, SENT, ACCEPTED, REJECTED, EXPIRED
  valid_until     DateTime?
  subtotal        Float       @default(0)
  tax_amount      Float       @default(0)
  total_amount    Float       @default(0)
  currency        String      @default("RUB")
  notes           String?
  terms           String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@map("quotes")
}

model QuoteItem {
  id          String  @id @default(cuid())
  quote_id    String
  product_id  String
  quantity    Int
  unit_price  Float
  total_price Float
  notes       String?

  @@map("quote_items")
}

// ===========================================
// ЗАКАЗЫ
// ===========================================

model Order {
  id              String      @id @default(cuid())
  number          String      @unique
  quote_id        String?
  client_id       String
  created_by      String
  status          String      @default("PENDING") // PENDING, CONFIRMED, IN_PRODUCTION, READY_FOR_SHIPPING, SHIPPED, DELIVERED, CANCELLED
  order_date      DateTime    @default(now())
  delivery_date   DateTime?
  subtotal        Float       @default(0)
  tax_amount      Float       @default(0)
  total_amount    Float       @default(0)
  currency        String      @default("RUB")
  notes           String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  order_id    String
  product_id  String
  quantity    Int
  unit_price  Float
  total_price Float
  notes       String?

  @@map("order_items")
}

// ===========================================
// СЧЕТА
// ===========================================

model Invoice {
  id              String        @id @default(cuid())
  number          String        @unique
  order_id        String?
  client_id       String
  created_by      String
  status          String        @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  invoice_date    DateTime      @default(now())
  due_date        DateTime?
  subtotal        Float         @default(0)
  tax_amount      Float         @default(0)
  total_amount    Float         @default(0)
  currency        String        @default("RUB")
  notes           String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(cuid())
  invoice_id  String
  product_id  String
  quantity    Int
  unit_price  Float
  total_price Float
  notes       String?

  @@map("invoice_items")
}

// ===========================================
// ЗАКАЗЫ ПОСТАВЩИКАМ
// ===========================================

model SupplierOrder {
  id              String            @id @default(cuid())
  order_id        String
  executor_id     String
  supplier_name   String
  supplier_email  String?
  supplier_phone  String?
  status          String            @default("PENDING") // PENDING, SENT, CONFIRMED, IN_PRODUCTION, SHIPPED, DELIVERED, CANCELLED
  order_date      DateTime          @default(now())
  expected_date   DateTime?
  notes           String?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt

  @@map("supplier_orders")
}

// ===========================================
// УВЕДОМЛЕНИЯ
// ===========================================

model Notification {
  id          String             @id @default(cuid())
  user_id     String
  type        String // ORDER_CREATED, ORDER_UPDATED, INVOICE_CREATED, QUOTE_CREATED, SYSTEM_ALERT
  title       String
  message     String
  is_read     Boolean            @default(false)
  data        String?            @default("{}") // JSON as string for SQLite
  created_at  DateTime           @default(now())

  @@map("notifications")
}

// ===========================================
// ИСТОРИЯ ИМПОРТА
// ===========================================

model ImportHistory {
  id                  String   @id @default(cuid())
  catalog_category_id String
  filename            String
  file_size           Int?
  imported_count      Int      @default(0)
  error_count         Int      @default(0)
  status              String   @default("pending")
  errors              String   @default("[]") // JSON as string for SQLite
  created_at          DateTime @default(now())

  @@map("import_history")
}

// ===========================================
// СИСТЕМНЫЕ НАСТРОЙКИ
// ===========================================

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("system_settings")
}