const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function extractDatabaseProperties() {
  try {
    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞...\n');
    
    // 1. –ù–∞–π–¥–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
    const doorsCategory = await prisma.catalogCategory.findFirst({
      where: {
        name: "–ú–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –¥–≤–µ—Ä–∏"
      }
    });

    if (!doorsCategory) {
      console.log('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–≤–µ—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${doorsCategory.name} (ID: ${doorsCategory.id})\n`);

    // 2. –ü–æ–ª—É—á–∏–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const doorsProducts = await prisma.product.findMany({
      where: {
        catalog_category_id: doorsCategory.id
      },
      take: 10, // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      select: {
        id: true,
        sku: true,
        name: true,
        properties_data: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${doorsProducts.length}\n`);

    if (doorsProducts.length === 0) {
      console.log('‚ùå –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–≤–µ—Ä–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É properties_data
    console.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–í–û–ô–°–¢–í:\n');

    const allKeys = new Set();
    const columnKeys = new Set();
    const realKeys = new Set();
    const keyValues = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π

    doorsProducts.forEach((product, index) => {
      console.log(`\nüì¶ –¢–æ–≤–∞—Ä ${index + 1}: ${product.name || product.sku || product.id}`);
      
      if (product.properties_data) {
        try {
          const properties = typeof product.properties_data === 'string' 
            ? JSON.parse(product.properties_data) 
            : product.properties_data;
          
          console.log(`   üìã –°–≤–æ–π—Å—Ç–≤: ${Object.keys(properties).length}`);
          
          Object.entries(properties).forEach(([key, value]) => {
            allKeys.add(key);
            
            // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª—é—á–∏
            if (key.startsWith('column_')) {
              columnKeys.add(key);
            } else {
              realKeys.add(key);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
            if (!keyValues.has(key)) {
              keyValues.set(key, []);
            }
            if (keyValues.get(key).length < 3) {
              keyValues.get(key).push(String(value).substring(0, 50));
            }
          });
          
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ properties_data: ${error.message}`);
        }
      } else {
        console.log('   ‚ö†Ô∏è –ù–µ—Ç properties_data');
      }
    });

    console.log('\n' + '='.repeat(80));
    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–í–û–ô–°–¢–í:');
    console.log('='.repeat(80));
    console.log(`–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: ${allKeys.size}`);
    console.log(`–ö–ª—é—á–∏ column_*: ${columnKeys.size}`);
    console.log(`–†–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏: ${realKeys.size}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: ${((realKeys.size / allKeys.size) * 100).toFixed(1)}%`);

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π
    console.log('\n' + '='.repeat(80));
    console.log('üîë –í–°–ï –ù–ê–ô–î–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò –° –ü–†–ò–ú–ï–†–ê–ú–ò –ó–ù–ê–ß–ï–ù–ò–ô:');
    console.log('='.repeat(80));

    const sortedKeys = Array.from(allKeys).sort();
    
    sortedKeys.forEach(key => {
      const values = keyValues.get(key) || [];
      const isColumnKey = key.startsWith('column_');
      const prefix = isColumnKey ? 'üî¥' : '‚úÖ';
      
      console.log(`\n${prefix} "${key}"`);
      if (values.length > 0) {
        console.log(`   –ü—Ä–∏–º–µ—Ä—ã: ${values.join(', ')}`);
      } else {
        console.log(`   –ü—Ä–∏–º–µ—Ä—ã: (–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π)`);
      }
    });

    // 5. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ —Ç–∏–ø–∞–º
    console.log('\n' + '='.repeat(80));
    console.log('üìã –ì–†–£–ü–ü–ò–†–û–í–ö–ê –†–ï–ê–õ–¨–ù–´–• –ö–õ–Æ–ß–ï–ô:');
    console.log('='.repeat(80));

    const grouped = {
      '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': [],
      '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': [],
      '–†–∞–∑–º–µ—Ä—ã': [],
      '–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': [],
      '–¶–≤–µ—Ç–∞': [],
      '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã': [],
      '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ': [],
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ': []
    };

    Array.from(realKeys).forEach(key => {
      const keyLower = key.toLowerCase();
      const values = keyValues.get(key) || [];
      
      if (keyLower.includes('–∞—Ä—Ç–∏–∫—É–ª') || keyLower.includes('–Ω–æ–º–µ—Ä') || keyLower.includes('–∫–æ–¥') || keyLower.includes('sku')) {
        grouped['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'].push({ key, values });
      } else if (keyLower.includes('–º–æ–¥–µ–ª—å') || keyLower.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || keyLower.includes('–∏–º—è')) {
        grouped['–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'].push({ key, values });
      } else if (keyLower.includes('—à–∏—Ä–∏–Ω–∞') || keyLower.includes('–≤—ã—Å–æ—Ç–∞') || keyLower.includes('—Ç–æ–ª—â–∏–Ω–∞') || keyLower.includes('/–º–º')) {
        grouped['–†–∞–∑–º–µ—Ä—ã'].push({ key, values });
      } else if (keyLower.includes('—Ü–µ–Ω–∞') || keyLower.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || keyLower.includes('—Ä—Ä—Ü')) {
        grouped['–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'].push({ key, values });
      } else if (keyLower.includes('—Ü–≤–µ—Ç') || keyLower.includes('color')) {
        grouped['–¶–≤–µ—Ç–∞'].push({ key, values });
      } else if (keyLower.includes('–ø–æ–∫—Ä—ã—Ç–∏–µ') || keyLower.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || keyLower.includes('—Ç–∏–ø') || keyLower.includes('—Å—Ç–∏–ª—å')) {
        grouped['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'].push({ key, values });
      } else if (keyLower.includes('_id') || keyLower.includes('url') || keyLower.includes('path') || keyLower.includes('photo')) {
        grouped['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ'].push({ key, values });
      } else {
        grouped['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ'].push({ key, values });
      }
    });

    Object.entries(grouped).forEach(([category, items]) => {
      if (items.length > 0) {
        console.log(`\n${category}:`);
        items.forEach(({ key, values }) => {
          console.log(`  "${key}"`);
          if (values.length > 0) {
            console.log(`    –ü—Ä–∏–º–µ—Ä—ã: ${values.join(', ')}`);
          }
        });
      }
    });

    // 6. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
    console.log('\n' + '='.repeat(80));
    console.log('üîß –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø API:');
    console.log('='.repeat(80));

    console.log('export const DOOR_PROPERTIES = {');
    Array.from(realKeys).sort().forEach(key => {
      const constantName = key
        .toUpperCase()
        .replace(/[^A-Z–ê-–Ø0-9]/g, '_')
        .replace(/_+/g, '_')
        .replace(/^_|_$/g, '');
      
      console.log(`  ${constantName}: '${key}',`);
    });
    console.log('} as const;\n');

    // 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª—é—á–∏ column_*
    if (columnKeys.size > 0) {
      console.log('üö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ö–õ–Æ–ß–ò column_*:');
      console.log('='.repeat(50));
      Array.from(columnKeys).sort().forEach(key => {
        const values = keyValues.get(key) || [];
        console.log(`"${key}": ${values.join(', ')}`);
      });
      console.log('\n‚ö†Ô∏è –≠—Ç–∏ –∫–ª—é—á–∏ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ Excel!');
    }

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

extractDatabaseProperties();
