'use client';

import React, { useState, useCallback } from 'react';
import { Card, Button } from '../ui';
import PropertyMapper from './PropertyMapper';
import FormulaBuilder from './FormulaBuilder';
import PhotoUploader from './PhotoUploader';

interface PriceListData {
  headers: string[];
  rows: any[][];
  totalRows: number;
}

interface PhotoData {
  files: File[];
  totalCount: number;
}

interface PropertyMapping {
  fieldName: string;
  displayName: string;
  dataType: 'text' | 'number' | 'select' | 'boolean' | 'image';
  isRequired: boolean;
  isFilterable: boolean;
  isVisible: boolean;
  options?: string[];
  unit?: string;
}

interface FormulaConfig {
  clientPriceFormula: string;
  discountFormula: string;
  factoryOrderFormula: string;
  defaultMargin: number;
  currency: string;
}

interface PhotoMapping {
  mappingType: 'by_sku' | 'by_order' | 'by_name';
  skuField?: string;
  nameField?: string;
  photoFiles: File[];
  mappedPhotos: Record<string, string>;
}

interface DataUploadProps {
  onPriceListLoaded: (data: PriceListData) => void;
  onPhotosLoaded: (data: PhotoData) => void;
  onComplete: () => void;
}

type DataStep = 'upload' | 'properties' | 'formulas' | 'photos' | 'complete';

export default function DataUpload({ onPriceListLoaded, onPhotosLoaded, onComplete }: DataUploadProps) {
  const [currentStep, setCurrentStep] = useState<DataStep>('upload');
  const [priceListData, setPriceListData] = useState<PriceListData | null>(null);
  const [photoData, setPhotoData] = useState<PhotoData | null>(null);
  const [propertyMappings, setPropertyMappings] = useState<PropertyMapping[]>([]);
  const [formulaConfig, setFormulaConfig] = useState<FormulaConfig | null>(null);
  const [photoMapping, setPhotoMapping] = useState<PhotoMapping | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  const handlePriceListUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsProcessing(true);
    
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ —Å 30 —Å—Ç–æ–ª–±—Ü–∞–º–∏
      const mockData: PriceListData = {
        headers: [
          '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–†–∞–∑–º–µ—Ä', '–¶–≤–µ—Ç', '–ú–∞—Ç–µ—Ä–∏–∞–ª',
          '–¢–∏–ø_–¥–≤–µ—Ä–∏', '–¢–æ–ª—â–∏–Ω–∞', '–®–∏—Ä–∏–Ω–∞', '–í—ã—Å–æ—Ç–∞', '–í–µ—Å', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å',
          '–°—Ç—Ä–∞–Ω–∞', '–ì–∞—Ä–∞–Ω—Ç–∏—è', '–°—Ä–æ–∫_–ø–æ—Å—Ç–∞–≤–∫–∏', '–ù–∞–ª–∏—á–∏–µ', '–°–∫–∏–¥–∫–∞',
          '–¶–µ–Ω–∞_–æ–ø—Ç', '–ú–∏–Ω–∏–º—É–º_–æ–ø—Ç', '–§—É—Ä–Ω–∏—Ç—É—Ä–∞', '–ü–µ—Ç–ª–∏', '–†—É—á–∫–∏',
          '–ó–∞–º–æ–∫', '–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å', '–£—Ç–µ–ø–ª–µ–Ω–∏–µ', '–ó–≤—É–∫–æ–∏–∑–æ–ª—è—Ü–∏—è',
          '–û–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å', '–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å', '–§–æ—Ç–æ', '–û–ø–∏—Å–∞–Ω–∏–µ'
        ],
        rows: [
          [
            'DOOR-001', '–î–≤–µ—Ä—å –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è', '15000', '2000x800', '–ë–µ–ª—ã–π', '–ú–î–§',
            '–†–∞—Å–ø–∞—à–Ω–∞—è', '40', '800', '2000', '25', '–î–≤–µ—Ä–∏–ü—Ä–æ',
            '–†–æ—Å—Å–∏—è', '24', '7', '–í –Ω–∞–ª–∏—á–∏–∏', '5',
            '12000', '10', '–ó–æ–ª–æ—Ç–∞—è', '–°–∫—Ä—ã—Ç—ã–µ', '–†—É—á–∫–∞-—Å–∫–æ–±–∞',
            '–ù–µ—Ç', '–†–µ–∑–∏–Ω–æ–≤—ã–π', '–ù–µ—Ç', '–°—Ä–µ–¥–Ω—è—è',
            '–ù–µ—Ç', '–î–∞', 'door-001.jpg', '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω–∞—è –¥–≤–µ—Ä—å'
          ],
          [
            'DOOR-002', '–î–≤–µ—Ä—å –≤—Ö–æ–¥–Ω–∞—è', '25000', '2100x900', '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', '–ú–µ—Ç–∞–ª–ª',
            '–†–∞—Å–ø–∞—à–Ω–∞—è', '50', '900', '2100', '45', '–ú–µ—Ç–∞–ª–ª–î–≤–µ—Ä—å',
            '–†–æ—Å—Å–∏—è', '36', '14', '–ü–æ–¥ –∑–∞–∫–∞–∑', '10',
            '20000', '5', '–°–µ—Ä–µ–±—Ä—è–Ω–∞—è', '–ù–∞—Ä—É–∂–Ω—ã–µ', '–†—É—á–∫–∞-–∫–Ω–æ–ø–∫–∞',
            '–¶–∏–ª–∏–Ω–¥—Ä–æ–≤—ã–π', '–ú–∞–≥–Ω–∏—Ç–Ω—ã–π', '–î–∞', '–í—ã—Å–æ–∫–∞—è',
            '–î–∞', '–î–∞', 'door-002.jpg', '–ù–∞–¥–µ–∂–Ω–∞—è –≤—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å'
          ],
          [
            'DOOR-003', '–î–≤–µ—Ä—å —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è', '18000', '2000x600', '–°–µ—Ä—ã–π', '–°—Ç–µ–∫–ª–æ',
            '–†–∞–∑–¥–≤–∏–∂–Ω–∞—è', '30', '600', '2000', '20', '–°—Ç–µ–∫–ª–æ–î–≤–µ—Ä—å',
            '–ò—Ç–∞–ª–∏—è', '12', '21', '–í –Ω–∞–ª–∏—á–∏–∏', '0',
            '18000', '1', '–•—Ä–æ–º', '–†–æ–ª–∏–∫–æ–≤—ã–µ', '–°–∫—Ä—ã—Ç–∞—è —Ä—É—á–∫–∞',
            '–ù–µ—Ç', '–°–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π', '–ù–µ—Ç', '–ù–∏–∑–∫–∞—è',
            '–ù–µ—Ç', '–ù–µ—Ç', 'door-003.jpg', '–°—Ç–∏–ª—å–Ω–∞—è —Ä–∞–∑–¥–≤–∏–∂–Ω–∞—è –¥–≤–µ—Ä—å'
          ]
        ],
        totalRows: 3
      };
      
      setPriceListData(mockData);
      onPriceListLoaded(mockData);
      setCurrentStep('properties');
      
    } catch (error) {
      console.error('Error processing price list:', error);
    } finally {
      setIsProcessing(false);
    }
  }, [onPriceListLoaded]);

  const handlePropertyMappingComplete = (mappings: PropertyMapping[]) => {
    setPropertyMappings(mappings);
    setCurrentStep('formulas');
  };

  const handleFormulaComplete = (config: FormulaConfig) => {
    setFormulaConfig(config);
    setCurrentStep('photos');
  };

  const handlePhotoMappingComplete = (mapping: PhotoMapping) => {
    setPhotoMapping(mapping);
    const photoData: PhotoData = {
      files: mapping.photoFiles,
      totalCount: mapping.photoFiles.length
    };
    setPhotoData(photoData);
    onPhotosLoaded(photoData);
    setCurrentStep('complete');
  };

  const handleComplete = () => {
    onComplete();
  };

  const getStepTitle = () => {
    switch (currentStep) {
      case 'upload': return '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞';
      case 'properties': return '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤–æ–π—Å—Ç–≤';
      case 'formulas': return '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—É–ª';
      case 'photos': return '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ';
      case 'complete': return '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ';
      default: return '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö';
    }
  };

  const getStepDescription = () => {
    switch (currentStep) {
      case 'upload': return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö';
      case 'properties': return '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–∞';
      case 'formulas': return '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω';
      case 'photos': return '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤';
      case 'complete': return '–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã';
      default: return '';
    }
  };

  const renderStepContent = () => {
    switch (currentStep) {
      case 'upload':
        return (
          <div className="space-y-6">
            <div className="text-center py-12">
              <div className="text-6xl mb-6">üìä</div>
              <h3 className="text-xl font-semibold text-black mb-4">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞</h3>
              <p className="text-gray-600 mb-6">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö (XLSX, CSV)</p>
              
              <input
                type="file"
                accept=".xlsx,.xls,.csv"
                onChange={handlePriceListUpload}
                className="hidden"
                id="price-list-upload"
              />
              <label
                htmlFor="price-list-upload"
                className="inline-flex items-center px-6 py-3 bg-black text-white rounded-none hover:bg-yellow-400 hover:text-black transition-all duration-200 cursor-pointer"
              >
                {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª'}
              </label>
              
              <p className="text-sm text-gray-500 mt-4">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .csv</p>
            </div>
          </div>
        );

      case 'properties':
        return priceListData ? (
          <PropertyMapper
            priceListHeaders={priceListData.headers}
            priceListData={priceListData.rows.map(row => {
              const obj: any = {};
              priceListData.headers.forEach((header, index) => {
                obj[header] = row[index];
              });
              return obj;
            })}
            onMappingComplete={handlePropertyMappingComplete}
            onBack={() => setCurrentStep('upload')}
          />
        ) : null;

      case 'formulas':
        return (
          <FormulaBuilder
            availableFields={priceListData?.headers || []}
            onFormulaComplete={handleFormulaComplete}
            onBack={() => setCurrentStep('properties')}
          />
        );

      case 'photos':
        return priceListData ? (
          <PhotoUploader
            priceListData={priceListData.rows.map(row => {
              const obj: any = {};
              priceListData.headers.forEach((header, index) => {
                obj[header] = row[index];
              });
              return obj;
            })}
            priceListHeaders={priceListData.headers}
            onPhotoMappingComplete={handlePhotoMappingComplete}
            onBack={() => setCurrentStep('formulas')}
          />
        ) : null;

      case 'complete':
        return (
          <div className="space-y-6">
            <div className="text-center py-12">
              <div className="text-6xl mb-6">‚úÖ</div>
              <h3 className="text-xl font-semibold text-black mb-4">–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!</h3>
              <p className="text-gray-600 mb-6">–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É</p>
              
              <div className="grid grid-cols-2 gap-4 max-w-md mx-auto mb-6">
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{priceListData?.totalRows || 0}</div>
                  <div className="text-sm text-gray-600">–¢–æ–≤–∞—Ä–æ–≤</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{propertyMappings.length}</div>
                  <div className="text-sm text-gray-600">–°–≤–æ–π—Å—Ç–≤</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{photoMapping?.photoFiles.length || 0}</div>
                  <div className="text-sm text-gray-600">–§–æ—Ç–æ</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded">
                  <div className="text-2xl font-bold text-black">{formulaConfig ? '‚úÖ' : '‚ùå'}</div>
                  <div className="text-sm text-gray-600">–§–æ—Ä–º—É–ª—ã</div>
                </div>
              </div>
              
              <Button variant="primary" onClick={handleComplete}>
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
              </Button>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞ */}
      <div className="flex justify-between items-center">
        <div>
          <h3 className="text-lg font-semibold text-black">{getStepTitle()}</h3>
          <p className="text-gray-600">{getStepDescription()}</p>
        </div>
        {currentStep !== 'upload' && (
          <Button variant="secondary" onClick={() => setCurrentStep('upload')}>
            ‚Üê –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </Button>
        )}
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —à–∞–≥–æ–≤ */}
      <Card variant="base">
        <div className="p-4">
          <div className="flex items-center space-x-4">
            {[
              { key: 'upload', label: '–ó–∞–≥—Ä—É–∑–∫–∞', icon: 'üìä' },
              { key: 'properties', label: '–°–≤–æ–π—Å—Ç–≤–∞', icon: '‚öôÔ∏è' },
              { key: 'formulas', label: '–§–æ—Ä–º—É–ª—ã', icon: 'üßÆ' },
              { key: 'photos', label: '–§–æ—Ç–æ', icon: 'üì∏' },
              { key: 'complete', label: '–ì–æ—Ç–æ–≤–æ', icon: '‚úÖ' }
            ].map((step, index) => {
              const isActive = step.key === currentStep;
              const isCompleted = ['upload', 'properties', 'formulas', 'photos', 'complete'].indexOf(currentStep) > index;
              
              return (
                <div key={step.key} className="flex items-center">
                  <div className={`flex items-center justify-center w-8 h-8 rounded-full border-2 transition-colors ${
                    isActive 
                      ? 'border-black bg-black text-white' 
                      : isCompleted 
                        ? 'border-green-500 bg-green-500 text-white'
                        : 'border-gray-300 bg-white text-gray-400'
                  }`}>
                    <span className="text-sm">{step.icon}</span>
                  </div>
                  <span className={`ml-2 text-sm font-medium ${
                    isActive ? 'text-black' : isCompleted ? 'text-green-600' : 'text-gray-500'
                  }`}>
                    {step.label}
                  </span>
                  {index < 4 && (
                    <div className={`w-6 h-0.5 mx-3 ${
                      isCompleted ? 'bg-green-500' : 'bg-gray-300'
                    }`} />
                  )}
                </div>
              );
            })}
          </div>
        </div>
      </Card>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —à–∞–≥–∞ */}
      {renderStepContent()}
    </div>
  );
}