'use client';

import React, { useState } from 'react';
import { Card, Button, Input, Select, Checkbox } from '../ui';

interface CategoryInfoFormProps {
  onComplete: (data: any) => void;
  onCancel: () => void;
}

interface CategoryData {
  name: string;
  description: string;
  slug: string;
  icon: string;
  is_main: boolean;
  parent_id: string | null;
}

export default function CategoryInfoForm({ onComplete, onCancel }: CategoryInfoFormProps) {
  const [categoryData, setCategoryData] = useState<CategoryData>({
    name: '',
    description: '',
    slug: '',
    icon: 'üì¶',
    is_main: true,
    parent_id: null,
  });
  const [isLoading, setIsLoading] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type, checked } = e.target as HTMLInputElement;
    setCategoryData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
      ...(name === 'name' && { slug: generateSlug(value) })
    }));
  };

  const generateSlug = (name: string) => {
    return name.toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!categoryData.name.trim()) {
        alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
      }
      
      if (!categoryData.slug.trim()) {
        alert('–í–≤–µ–¥–∏—Ç–µ slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const finalData = {
        ...categoryData
      };

      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      onComplete(finalData);
    } catch (error) {
      console.error('Error creating category:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card variant="base">
          <div className="p-6">
            <h2 className="text-lg font-semibold text-black mb-4">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-black mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *</label>
                <Input
                  id="name"
                  name="name"
                  type="text"
                  required
                  value={categoryData.name}
                  onChange={handleInputChange}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–≤–µ—Ä–∏ –º–µ–∂–∫–æ–º–Ω–∞—Ç–Ω—ã–µ"
                />
              </div>
              <div>
                <label htmlFor="slug" className="block text-sm font-medium text-black mb-1">Slug (URL-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä) *</label>
                <Input
                  id="slug"
                  name="slug"
                  type="text"
                  required
                  value={categoryData.slug}
                  onChange={handleInputChange}
                  placeholder="dveri-mezhkomnatnye"
                />
              </div>
              <div className="md:col-span-2">
                <label htmlFor="description" className="block text-sm font-medium text-black mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  id="description"
                  name="description"
                  value={categoryData.description}
                  onChange={handleInputChange}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 text-black focus:outline-none focus:ring-2 focus:ring-yellow-400"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
                ></textarea>
              </div>
              <div>
                <label htmlFor="icon" className="block text-sm font-medium text-black mb-1">–ò–∫–æ–Ω–∫–∞ (Emoji –∏–ª–∏ URL)</label>
                <Input
                  id="icon"
                  name="icon"
                  type="text"
                  value={categoryData.icon}
                  onChange={handleInputChange}
                  placeholder="üö™"
                />
              </div>
              <div>
                <label htmlFor="is_main" className="block text-sm font-medium text-black mb-1">–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</label>
                <Select
                  id="is_main"
                  name="is_main"
                  value={categoryData.is_main ? 'main' : 'sub'}
                  onChange={(e) => setCategoryData(prev => ({
                    ...prev,
                    is_main: e.target.value === 'main',
                    parent_id: e.target.value === 'main' ? null : prev.parent_id
                  }))}
                  options={[
                    { value: 'main', label: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' },
                    { value: 'sub', label: '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è' }
                  ]}
                />
              </div>
              {!categoryData.is_main && (
                <div>
                  <label htmlFor="parent_id" className="block text-sm font-medium text-black mb-1">–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <Select
                    id="parent_id"
                    name="parent_id"
                    value={categoryData.parent_id || ''}
                    onChange={handleInputChange}
                    options={[
                      { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é' },
                      { value: 'doors-main', label: '–î–≤–µ—Ä–∏ (–û—Å–Ω–æ–≤–Ω–∞—è)' },
                      { value: 'smart-main', label: '–°–º–∞—Ä—Ç (–û—Å–Ω–æ–≤–Ω–∞—è)' }
                    ]}
                  />
                </div>
              )}
            </div>
          </div>
        </Card>



        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex justify-between">
          <Button
            type="button"
            variant="secondary"
            onClick={onCancel}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            type="submit"
            variant="primary"
            disabled={isLoading}
          >
            {isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä'}
          </Button>
        </div>
      </form>
    </div>
  );
}
