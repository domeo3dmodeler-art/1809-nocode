'use client';

import React, { useState } from 'react';
import { ComponentsPanelProps } from '../types';

interface ComponentCategory {
  id: string;
  name: string;
  icon: string;
  components: ComponentItem[];
}

interface ComponentItem {
  id: string;
  name: string;
  type: string;
  icon: string;
  description: string;
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
const componentCategories: ComponentCategory[] = [
  {
    id: 'essential',
    name: '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
    icon: '‚≠ê',
    components: [
      { id: 'heading', name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', type: 'heading', icon: 'üì∞', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Å–µ–∫—Ü–∏–∏' },
      { id: 'text', name: '–¢–µ–∫—Å—Ç', type: 'text', icon: 'üìù', description: '–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç' },
      { id: 'image', name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', type: 'image', icon: 'üñºÔ∏è', description: '–§–æ—Ç–æ –∏–ª–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è' },
      { id: 'button', name: '–ö–Ω–æ–ø–∫–∞', type: 'button', icon: 'üîò', description: '–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è' }
    ]
  },
  {
    id: 'product',
    name: '–¢–æ–≤–∞—Ä–Ω—ã–µ –±–ª–æ–∫–∏',
    icon: 'üì¶',
    components: [
      { id: 'productConfigurator', name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤', type: 'productConfigurator', icon: '‚öôÔ∏è', description: '–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π' },
      { id: 'productGrid', name: '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', type: 'productGrid', icon: 'üìä', description: '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ –∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏' },
      { id: 'catalogTree', name: '–î–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–∞', type: 'catalogTree', icon: 'üå≥', description: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤' },
      { id: 'cart', name: '–ö–æ—Ä–∑–∏–Ω–∞', type: 'cart', icon: 'üõí', description: '–ö–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤' }
    ]
  },
  {
    id: 'configurators',
    name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä—ã',
    icon: 'üéØ',
    components: [
      { id: 'stepWizard', name: '–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä', type: 'stepWizard', icon: 'üßô', description: '–ü–æ—à–∞–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º' },
      { id: 'comparisonTable', name: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤', type: 'comparisonTable', icon: 'üìä', description: '–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤' },
      { id: 'priceCalculator', name: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω—ã', type: 'priceCalculator', icon: 'üí∞', description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –∂–∏–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏' }
    ]
  },
  {
    id: 'layout',
    name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    icon: 'üèóÔ∏è',
    components: [
      { id: 'section', name: '–°–µ–∫—Ü–∏—è', type: 'section', icon: 'üìã', description: '–û—Å–Ω–æ–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã' },
      { id: 'row', name: '–°—Ç—Ä–æ–∫–∞', type: 'row', icon: '‚ÜîÔ∏è', description: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤' },
      { id: 'column', name: '–ö–æ–ª–æ–Ω–∫–∞', type: 'column', icon: '‚ÜïÔ∏è', description: '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤' },
      { id: 'spacer', name: '–û—Ç—Å—Ç—É–ø', type: 'spacer', icon: '‚ÜîÔ∏è', description: '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏' }
    ]
  }
];

export function ComponentsPanel({ onAddElement, selectedCategory }: ComponentsPanelProps) {
  const [expandedCategories, setExpandedCategories] = useState<string[]>(['essential', 'product', 'configurators']);
  const [searchQuery, setSearchQuery] = useState('');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredCategories = componentCategories.map(category => ({
    ...category,
    components: category.components.filter(component =>
      component.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      component.description.toLowerCase().includes(searchQuery.toLowerCase())
    )
  })).filter(category => category.components.length > 0);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const toggleCategory = (categoryId: string) => {
    setExpandedCategories(prev =>
      prev.includes(categoryId)
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const handleAddElement = (elementType: string) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–Ω—Ç—Ä canvas
    onAddElement(elementType, { x: 400, y: 300 });
  };

  return (
    <div className="w-80 bg-white border-r border-gray-200 flex flex-col">
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-3">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h3>
        
        {/* Search */}
        <div className="relative">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full px-3 py-2 pl-10 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <svg
            className="absolute left-3 top-2.5 w-4 h-4 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>

      {/* Components List */}
      <div className="flex-1 overflow-y-auto">
        {filteredCategories.map((category) => (
          <div key={category.id} className="border-b border-gray-100">
            {/* Category Header */}
            <button
              onClick={() => toggleCategory(category.id)}
              className="w-full px-4 py-3 flex items-center justify-between text-left hover:bg-gray-50"
            >
              <div className="flex items-center space-x-2">
                <span className="text-lg">{category.icon}</span>
                <span className="font-medium text-gray-900">{category.name}</span>
              </div>
              <svg
                className={`w-4 h-4 text-gray-500 transition-transform ${
                  expandedCategories.includes(category.id) ? 'rotate-180' : ''
                }`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>

            {/* Components */}
            {expandedCategories.includes(category.id) && (
              <div className="pb-2">
                {category.components.map((component) => (
                  <button
                    key={component.id}
                    onClick={() => handleAddElement(component.type)}
                    className="w-full px-6 py-2 flex items-center space-x-3 text-left hover:bg-gray-50 group"
                  >
                    <span className="text-lg group-hover:scale-110 transition-transform">
                      {component.icon}
                    </span>
                    <div className="flex-1 min-w-0">
                      <div className="font-medium text-gray-900 text-sm">
                        {component.name}
                      </div>
                      <div className="text-xs text-gray-500 truncate">
                        {component.description}
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            )}
          </div>
        ))}

        {/* Empty State */}
        {filteredCategories.length === 0 && (
          <div className="p-8 text-center">
            <div className="text-4xl mb-4">üîç</div>
            <h4 className="text-lg font-medium text-gray-900 mb-2">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h4>
            <p className="text-gray-500 text-sm">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            </p>
          </div>
        )}
      </div>

      {/* Footer */}
      <div className="p-4 border-t border-gray-200 bg-gray-50">
        <div className="text-xs text-gray-500 text-center">
          –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ canvas –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        </div>
      </div>
    </div>
  );
}
