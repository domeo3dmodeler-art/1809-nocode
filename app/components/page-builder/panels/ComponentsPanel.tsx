'use client';

import React, { useState } from 'react';
import { ComponentsPanelProps } from '../types';
import { getBlockName, getBlockDescription } from '../../../lib/block-names';

interface ComponentCategory {
  id: string;
  name: string;
  icon: string;
  components: ComponentItem[];
}

interface ComponentItem {
  id: string;
  name: string;
  type: string;
  icon: string;
  description: string;
}

// –û—á–∏—â–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const componentCategories: ComponentCategory[] = [
  {
    id: 'essential',
    name: '–û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
    icon: '‚≠ê',
    components: [
      { id: 'heading', name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', type: 'heading', icon: 'üì∞', description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ —Å–µ–∫—Ü–∏–∏' },
      { id: 'text', name: '–¢–µ–∫—Å—Ç', type: 'text', icon: 'üìù', description: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫' },
      { id: 'section', name: '–°–µ–∫—Ü–∏—è', type: 'section', icon: 'üìã', description: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤' },
      { id: 'spacer', name: '–û—Ç—Å—Ç—É–ø', type: 'spacer', icon: '‚ÜîÔ∏è', description: '–ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏' }
    ]
  },
  {
    id: 'products',
    name: '–¢–æ–≤–∞—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
    icon: 'üì¶',
    components: [
      { id: 'productCard', name: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞', type: 'productCard', icon: 'üõçÔ∏è', description: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π' },
      { id: 'productGrid', name: '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤', type: 'productGrid', icon: 'üìä', description: '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π' },
      { id: 'filteredProducts', name: '–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', type: 'filteredProducts', icon: 'üîç', description: '–¢–æ–≤–∞—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∏' }
    ]
  },
  {
    id: 'filters',
    name: '–§–∏–ª—å—Ç—Ä—ã',
    icon: 'üîç',
    components: [
      { id: 'productFilter', name: '–§–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤', type: 'productFilter', icon: 'üîç', description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤' },
      { id: 'propertyFilter', name: '–§–∏–ª—å—Ç—Ä –ø–æ —Å–≤–æ–π—Å—Ç–≤—É', type: 'propertyFilter', icon: 'üè∑Ô∏è', description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –ª—é–±–æ–º—É —Å–≤–æ–π—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–∞' }
    ]
  },
  {
    id: 'forms',
    name: '–§–æ—Ä–º—ã –∏ –ø–æ–ª—è',
    icon: 'üìù',
    components: [
      { id: 'input', name: '–ü–æ–ª–µ –≤–≤–æ–¥–∞', type: 'input', icon: 'üìù', description: '–ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —á–∏—Å–µ–ª' },
      { id: 'select', name: '–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫', type: 'select', icon: 'üìã', description: '–í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø—Ü–∏–π' },
      { id: 'checkbox', name: '–ß–µ–∫–±–æ–∫—Å', type: 'checkbox', icon: '‚òëÔ∏è', description: '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø—Ü–∏–π' },
      { id: 'radio', name: '–†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞', type: 'radio', icon: 'üîò', description: '–û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –≥—Ä—É–ø–ø—ã' }
    ]
  },
  {
    id: 'functional',
    name: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ',
    icon: '‚öôÔ∏è',
    components: [
      { id: 'cart', name: '–ö–æ—Ä–∑–∏–Ω–∞', type: 'cart', icon: 'üõí', description: '–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫' }
    ]
  }
];

export function ComponentsPanel({ onAddElement, selectedCategory }: ComponentsPanelProps) {
  const [expandedCategories, setExpandedCategories] = useState<string[]>(['essential', 'products', 'filters']);
  const [searchQuery, setSearchQuery] = useState('');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredCategories = componentCategories.map(category => ({
    ...category,
    components: category.components.filter(component =>
      component.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      component.description.toLowerCase().includes(searchQuery.toLowerCase())
    )
  })).filter(category => category.components.length > 0);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const toggleCategory = (categoryId: string) => {
    setExpandedCategories(prev =>
      prev.includes(categoryId)
        ? prev.filter(id => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
  const handleAddElement = (component: ComponentItem) => {
    const newElement: any = {
      id: `element-${Date.now()}`,
      type: component.type,
      position: { x: 50, y: 50 },
      size: { width: 300, height: 200 },
      props: {},
      style: {
        backgroundColor: '#ffffff',
        borderColor: '#e5e7eb',
        borderRadius: '8px',
        padding: '16px',
        margin: '0px'
      }
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    switch (component.type) {
      case 'heading':
        newElement.size = { width: 400, height: 80 };
        newElement.props = { text: '–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', level: 2 };
        break;
      case 'text':
        newElement.size = { width: 300, height: 120 };
        newElement.props = { text: '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç' };
        break;
      case 'productCard':
        newElement.size = { width: 250, height: 300 };
        break;
      case 'productGrid':
        newElement.size = { width: 600, height: 400 };
        break;
      case 'cart':
        newElement.size = { width: 350, height: 200 };
        break;
      case 'section':
        newElement.size = { width: 500, height: 300 };
        newElement.style.backgroundColor = '#f9fafb';
        break;
      case 'spacer':
        newElement.size = { width: 200, height: 50 };
        newElement.style.backgroundColor = '#f3f4f6';
        break;
    }

    onAddElement(newElement);
  };

  return (
    <div className="h-full bg-white border-r border-gray-200 flex flex-col">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="p-4 border-b border-gray-200">
        <h2 className="text-lg font-semibold text-gray-900">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
        <p className="text-sm text-gray-600 mt-1">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
      </div>

      {/* –ü–æ–∏—Å–∫ */}
      <div className="p-4 border-b border-gray-200">
        <input
          type="text"
          placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ */}
      <div className="flex-1 overflow-y-auto">
        {filteredCategories.map(category => (
          <div key={category.id} className="border-b border-gray-100">
            <button
              onClick={() => toggleCategory(category.id)}
              className="w-full px-4 py-3 text-left hover:bg-gray-50 flex items-center justify-between"
            >
              <div className="flex items-center">
                <span className="text-lg mr-2">{category.icon}</span>
                <span className="font-medium text-gray-900">{category.name}</span>
                <span className="ml-2 text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">
                  {category.components.length}
                </span>
              </div>
              <span className={`text-gray-400 transition-transform ${
                expandedCategories.includes(category.id) ? 'rotate-180' : ''
              }`}>
                ‚ñº
              </span>
            </button>

            {expandedCategories.includes(category.id) && (
              <div className="bg-gray-50">
                {category.components.map(component => (
                  <div
                    key={component.id}
                    draggable
                    onDragStart={(e) => {
                      e.dataTransfer.setData('application/json', JSON.stringify(component));
                    }}
                    onClick={() => handleAddElement(component)}
                    className="px-6 py-3 hover:bg-gray-100 cursor-pointer border-b border-gray-100 last:border-b-0"
                  >
                    <div className="flex items-center">
                      <span className="text-lg mr-3">{component.icon}</span>
                      <div className="flex-1">
                        <div className="font-medium text-gray-900 text-sm">{component.name}</div>
                        <div className="text-xs text-gray-600 mt-1">{component.description}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      <div className="p-4 bg-blue-50 border-t border-blue-200">
        <div className="text-xs text-blue-700">
          <div className="font-medium mb-1">üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</div>
          <div>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É</div>
        </div>
      </div>
    </div>
  );
}