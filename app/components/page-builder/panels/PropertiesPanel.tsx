'use client';

import React, { useState, useEffect } from 'react';
import { PropertiesPanelProps, BaseElement, Page, Spacing, Style } from '../types';
import { CategoryTreeSelector } from './CategoryTreeSelector';
import { ProductPropertiesSelector } from './ProductPropertiesSelector';
import { PropertyDisplaySettings } from './PropertyDisplaySettings';
import { CatalogSelector } from '../elements/CatalogSelector';
import { extractUniquePropertyValues } from '@/lib/string-utils';

export function PropertiesPanel({ element, page, onUpdateElement, onUpdatePage }: PropertiesPanelProps) {
  console.log('üö® PropertiesPanel: –†–µ–Ω–¥–µ—Ä!', {
    elementType: element?.type,
    elementId: element?.id,
    elementProps: element?.props
  });
  
  const [activeTab, setActiveTab] = useState<'content' | 'style' | 'layout' | 'page'>('content');
  const [categories, setCategories] = useState<any[]>([]);
  const [loadingCategories, setLoadingCategories] = useState(false);
  const [availableProperties, setAvailableProperties] = useState<any[]>([]);
  const [loadingProducts, setLoadingProducts] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState({ current: 0, total: 0 });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ç–∞–ª–æ–≥–∞
  useEffect(() => {
    const loadCategories = async () => {
      setLoadingCategories(true);
      try {
        const response = await fetch('/api/catalog/categories/tree');
        if (response.ok) {
          const data = await response.json();
          setCategories(data.categories || []);
        }
      } catch (error) {
        console.error('Error loading categories:', error);
      } finally {
        setLoadingCategories(false);
      }
    };

    loadCategories();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    const loadProperties = async () => {
      console.log('PropertiesPanel: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', element?.props?.categoryIds);
      
      if (!element?.props?.categoryIds?.length) {
        console.log('PropertiesPanel: –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –æ—á–∏—â–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞');
        setAvailableProperties([]);
        return;
      }

      try {
        console.log('PropertiesPanel: –ó–∞–ø—Ä–æ—Å –∫ API /api/catalog/properties');
        const response = await fetch('/api/catalog/properties', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ categoryIds: element.props.categoryIds })
        });
        
        if (response.ok) {
          const propertiesData = await response.json();
          const properties = propertiesData.properties || [];
          console.log('PropertiesPanel: –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞:', properties.map(p => ({ id: p.id, name: p.name })));
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
          setLoadingProducts(true);
          setLoadingProgress({ current: 0, total: 100 });
          
          try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ —Å—Ä–∞–∑—É
            // PropertyFilter –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
            console.log('PropertiesPanel: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ - PropertyFilter –∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞');
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö)
            const propertiesWithOptions = properties.map((property: any) => {
              console.log(`Property "${property.name}": –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (PropertyFilter –∑–∞–≥—Ä—É–∑–∏—Ç)`);
              
              return {
                ...property,
                options: [] // –ü—É—Å—Ç—ã–µ –æ–ø—Ü–∏–∏, PropertyFilter –∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ
              };
            });
            
            setAvailableProperties(propertiesWithOptions);
            console.log('PropertiesPanel: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', propertiesWithOptions.map(p => ({ id: p.id, name: p.name })));
            setLoadingProgress({ current: 100, total: 100 });
          } catch (error: any) {
            console.error('PropertiesPanel: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:', error);
            setAvailableProperties(properties);
            console.log('PropertiesPanel: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:', properties.map(p => ({ id: p.id, name: p.name })));
          } finally {
            setLoadingProducts(false);
          }
        }
      } catch (error) {
        console.error('Error loading properties:', error);
        setAvailableProperties([]);
      }
    };

    loadProperties();
  }, [element?.props?.categoryIds]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const handleElementPropChange = (key: string, value: any) => {
    if (!element) return;

    console.log('üö® PropertiesPanel: handleElementPropChange –≤—ã–∑–≤–∞–Ω!', {
      elementId: element.id,
      key,
      value,
      currentProps: element.props
    });

    const newProps = {
      ...element.props,
      [key]: value
    };

    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º selectedPropertyIds, —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º propertyName
    if (key === 'selectedPropertyIds' && value?.length > 0 && availableProperties.length > 0) {
      const selectedProperty = availableProperties.find(p => p.id === value[0]);
      if (selectedProperty) {
        newProps.propertyName = selectedProperty.name;
        console.log('üö® PropertiesPanel: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º propertyName:', selectedProperty.name);
      }
    }

    console.log('üö® PropertiesPanel: –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!', {
      elementId: element.id,
      key,
      value,
      newProps,
      newPropsPropertyName: newProps.propertyName
    });

    onUpdateElement(element.id, {
      props: newProps
    });

    console.log('üö® PropertiesPanel: onUpdateElement –≤—ã–∑–≤–∞–Ω!', {
      elementId: element.id,
      updates: { props: newProps }
    });
  };

  const handleElementStyleChange = (key: keyof Style, value: any) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      style: {
        ...element.style,
        [key]: value
      }
    });
  };

  const handleElementPositionChange = (key: 'x' | 'y', value: number) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      position: {
        ...element.position,
        [key]: value
      }
    });
  };

  const handleElementSizeChange = (key: 'width' | 'height', value: number) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      size: {
        ...element.size,
        [key]: value
      }
    });
  };

  const handleSpacingChange = (spacingType: 'padding' | 'margin', key: keyof Spacing, value: number) => {
    if (!element) return;
    
    onUpdateElement(element.id, {
      style: {
        ...element.style,
        [spacingType]: {
          ...element.style[spacingType],
          [key]: value
        }
      }
    });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageSettingChange = (key: string, value: any) => {
    if (!page) return;
    
    onUpdatePage({
      settings: {
        ...page.settings,
        [key]: value
      }
    });
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  const renderContentTab = () => {
    if (!element) return null;

    switch (element.type) {
      case 'text':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
              </label>
              <textarea
                value={element.props.content || ''}
                onChange={(e) => handleElementPropChange('content', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={3}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
              </label>
              <input
                type="number"
                value={element.props.fontSize || 16}
                onChange={(e) => handleElementPropChange('fontSize', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
              </label>
              <input
                type="color"
                value={element.props.color || '#1f2937'}
                onChange={(e) => handleElementPropChange('color', e.target.value)}
                className="w-full h-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        );

      case 'heading':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
              </label>
              <input
                type="text"
                value={element.props.content || ''}
                onChange={(e) => handleElementPropChange('content', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
              </label>
              <select
                value={element.props.level || 1}
                onChange={(e) => handleElementPropChange('level', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={1}>H1</option>
                <option value={2}>H2</option>
                <option value={3}>H3</option>
                <option value={4}>H4</option>
                <option value={5}>H5</option>
                <option value={6}>H6</option>
              </select>
            </div>
          </div>
        );

      case 'image':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </label>
              <input
                type="url"
                value={element.props.src || ''}
                onChange={(e) => handleElementPropChange('src', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com/image.jpg"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Alt —Ç–µ–∫—Å—Ç
              </label>
              <input
                type="text"
                value={element.props.alt || ''}
                onChange={(e) => handleElementPropChange('alt', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
        );

      case 'button':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
              </label>
              <input
                type="text"
                value={element.props.text || ''}
                onChange={(e) => handleElementPropChange('text', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í–∞—Ä–∏–∞–Ω—Ç
              </label>
              <select
                value={element.props.variant || 'primary'}
                onChange={(e) => handleElementPropChange('variant', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="primary">–û—Å–Ω–æ–≤–Ω–∞—è</option>
                <option value="secondary">–í—Ç–æ—Ä–∏—á–Ω–∞—è</option>
                <option value="outline">–ö–æ–Ω—Ç—É—Ä–Ω–∞—è</option>
              </select>
            </div>
          </div>
        );

            case 'productConfigurator':
              return (
                <div className="space-y-4">
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    </label>
                    <input
                      type="text"
                      value={element.props.title || ''}
                      onChange={(e) => handleElementPropChange('title', e.target.value)}
                      placeholder="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      –û–ø–∏—Å–∞–Ω–∏–µ
                    </label>
                    <textarea
                      value={element.props.description || ''}
                      onChange={(e) => handleElementPropChange('description', e.target.value)}
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
                    </label>
                    {loadingCategories ? (
                      <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50">
                        <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
                      </div>
                    ) : loadingProducts ? (
                      <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-blue-50">
                        <div className="text-sm text-blue-600 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>
                        <div className="w-full bg-blue-200 rounded-full h-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                            style={{ width: `${Math.min((loadingProgress.current / loadingProgress.total) * 100, 100)}%` }}
                          />
                        </div>
                        <div className="text-xs text-blue-500 mt-1">
                          –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {loadingProgress.current} —Ç–æ–≤–∞—Ä–æ–≤
                        </div>
                      </div>
                    ) : (
                      <CategoryTreeSelector
                        categories={categories}
                        selectedIds={element.props.categoryIds || []}
                        onSelectionChange={(selectedIds) => {
                          handleElementPropChange('categoryIds', selectedIds);
                        }}
                      />
                    )}
                  </div>

                  {/* –°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </label>
                    <ProductPropertiesSelector
                      categoryIds={element.props.categoryIds || []}
                      selectedPropertyIds={element.props.selectedPropertyIds || []}
                      onPropertiesChange={(selectedPropertyIds) => {
                        console.log('üö® PropertiesPanel: onPropertiesChange –í–´–ó–í–ê–ù!', {
                          selectedPropertyIds,
                          availableProperties: availableProperties.length,
                          availablePropertiesList: availableProperties.map(p => ({ id: p.id, name: p.name })),
                          elementProps: element.props
                        });

                        handleElementPropChange('selectedPropertyIds', selectedPropertyIds);

                        if (selectedPropertyIds.length > 0) {
                          const firstPropertyId = selectedPropertyIds[0];
                          console.log('PropertiesPanel: –ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ ID:', firstPropertyId);
                          
                          const property = availableProperties.find(p => p.id === firstPropertyId);
                          console.log('PropertiesPanel: –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ:', property);
                          console.log('PropertiesPanel: –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', availableProperties);
                          
                          if (property) {
                            console.log('PropertiesPanel: –û–±–Ω–æ–≤–ª—è–µ–º propertyName –Ω–∞:', property.name);
                            handleElementPropChange('propertyName', property.name);
                            
                            // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                            setTimeout(() => {
                              console.log('PropertiesPanel: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                                elementProps: element.props,
                                propertyName: element.props.propertyName,
                                selectedPropertyIds: element.props.selectedPropertyIds
                              });
                            }, 100);
                          } else {
                            console.error('PropertiesPanel: –°–≤–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', availableProperties.map(p => p.id));
                            console.error('PropertiesPanel: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏...');
                            
                            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ (fallback)
                            const propertyName = selectedPropertyIds[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞
                            if (typeof propertyName === 'string') {
                              console.log('PropertiesPanel: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é:', propertyName);
                              handleElementPropChange('propertyName', propertyName);
                            }
                          }
                        } else {
                          console.log('PropertiesPanel: –û—á–∏—â–∞–µ–º propertyName');
                          handleElementPropChange('propertyName', '');
                        }
                      }}
                    />
                  </div>

                  {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ */}
                  {(element.props.selectedPropertyIds?.length > 0) && (
                    <div>
                      <PropertyDisplaySettings
                        selectedPropertyIds={element.props.selectedPropertyIds || []}
                        propertyDisplaySettings={element.props.propertyDisplaySettings || {}}
                        availableProperties={availableProperties}
                        onSettingsChange={(settings) => {
                          handleElementPropChange('propertyDisplaySettings', settings);
                        }}
                      />
                    </div>
                  )}

                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤
                      </label>
                      <input
                        type="number"
                        value={element.props.limit || 6}
                        onChange={(e) =>
                          handleElementPropChange('limit', parseInt(e.target.value))
                        }
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        min="1"
                        max="50"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –ö–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ
                      </label>
                      <select
                        value={element.props.columns || 3}
                        onChange={(e) => handleElementPropChange('columns', parseInt(e.target.value))}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        <option value={2}>2 –∫–æ–ª–æ–Ω–∫–∏</option>
                        <option value={3}>3 –∫–æ–ª–æ–Ω–∫–∏</option>
                        <option value={4}>4 –∫–æ–ª–æ–Ω–∫–∏</option>
                      </select>
                    </div>
                  </div>

                  {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </label>
                    <div className="space-y-2">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={element.props.showFilters !== false}
                          onChange={(e) => handleElementPropChange('showFilters', e.target.checked)}
                          className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</span>
                      </label>
                      
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={element.props.showProductSelector !== false}
                          onChange={(e) => handleElementPropChange('showProductSelector', e.target.checked)}
                          className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤</span>
                      </label>
                      
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={element.props.showConfiguration !== false}
                          onChange={(e) => handleElementPropChange('showConfiguration', e.target.checked)}
                          className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é</span>
                      </label>
                    </div>
                  </div>
                </div>
              );

            case 'productGrid':
              return (
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
                    </label>
                    {loadingCategories ? (
                      <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50">
                        <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
                      </div>
                    ) : (
                      <CategoryTreeSelector
                        categories={categories}
                        selectedIds={element.props.categoryIds || []}
                        onSelectionChange={(selectedIds) => {
                          handleElementPropChange('categoryIds', selectedIds);
                        }}
                      />
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –°–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    </label>
                    <ProductPropertiesSelector
                      categoryIds={element.props.categoryIds || []}
                      selectedPropertyIds={element.props.selectedPropertyIds || []}
                      onPropertiesChange={(selectedPropertyIds) => {
                        console.log('üö® PropertiesPanel: onPropertiesChange –í–´–ó–í–ê–ù!', {
                          selectedPropertyIds,
                          availableProperties: availableProperties.length,
                          availablePropertiesList: availableProperties.map(p => ({ id: p.id, name: p.name })),
                          elementProps: element.props
                        });

                        handleElementPropChange('selectedPropertyIds', selectedPropertyIds);

                        if (selectedPropertyIds.length > 0) {
                          const firstPropertyId = selectedPropertyIds[0];
                          console.log('PropertiesPanel: –ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ ID:', firstPropertyId);
                          
                          const property = availableProperties.find(p => p.id === firstPropertyId);
                          console.log('PropertiesPanel: –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ:', property);
                          console.log('PropertiesPanel: –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', availableProperties);
                          
                          if (property) {
                            console.log('PropertiesPanel: –û–±–Ω–æ–≤–ª—è–µ–º propertyName –Ω–∞:', property.name);
                            handleElementPropChange('propertyName', property.name);
                            
                            // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                            setTimeout(() => {
                              console.log('PropertiesPanel: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                                elementProps: element.props,
                                propertyName: element.props.propertyName,
                                selectedPropertyIds: element.props.selectedPropertyIds
                              });
                            }, 100);
                          } else {
                            console.error('PropertiesPanel: –°–≤–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', availableProperties.map(p => p.id));
                            console.error('PropertiesPanel: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏...');
                            
                            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ (fallback)
                            const propertyName = selectedPropertyIds[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞
                            if (typeof propertyName === 'string') {
                              console.log('PropertiesPanel: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é:', propertyName);
                              handleElementPropChange('propertyName', propertyName);
                            }
                          }
                        } else {
                          console.log('PropertiesPanel: –û—á–∏—â–∞–µ–º propertyName');
                          handleElementPropChange('propertyName', '');
                        }
                      }}
                    />
                  </div>

                  {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ */}
                  {(element.props.selectedPropertyIds?.length > 0) && (
                    <div>
                      <PropertyDisplaySettings
                        selectedPropertyIds={element.props.selectedPropertyIds || []}
                        propertyDisplaySettings={element.props.propertyDisplaySettings || {}}
                        availableProperties={availableProperties}
                        onSettingsChange={(settings) => {
                          handleElementPropChange('propertyDisplaySettings', settings);
                        }}
                      />
                    </div>
                  )}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤
                </label>
                <input
                  type="number"
                  value={element.props.limit || 12}
                  onChange={(e) => handleElementPropChange('limit', parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  min="1"
                  max="100"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ö–æ–ª–æ–Ω–∫–∏
                </label>
                <input
                  type="number"
                  value={element.props.columns || 3}
                  onChange={(e) => handleElementPropChange('columns', parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  min="1"
                  max="6"
                />
              </div>
            </div>
            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showPrice || false}
                  onChange={(e) => handleElementPropChange('showPrice', e.target.checked)}
                  className="mr-2"
                />
                –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—É
              </label>
            </div>
            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showDescription || false}
                  onChange={(e) => handleElementPropChange('showDescription', e.target.checked)}
                  className="mr-2"
                />
                –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
              </label>
            </div>
          </div>
        );


      case 'section':
      case 'row':
      case 'column':
      case 'grid':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
              </label>
              <input
                type="color"
                value={element.style.backgroundColor || '#ffffff'}
                onChange={(e) => handleElementStyleChange('backgroundColor', e.target.value)}
                className="w-full h-10 border border-gray-300 rounded-lg"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ç—Å—Ç—É–ø—ã
              </label>
              <div className="grid grid-cols-2 gap-2">
                <input
                  type="number"
                  placeholder="–í–µ—Ä—Ö"
                  value={element.style.padding?.top || 0}
                  onChange={(e) => handleElementSpacingChange('padding', 'top', parseInt(e.target.value))}
                  className="px-2 py-1 text-sm border border-gray-300 rounded"
                />
                <input
                  type="number"
                  placeholder="–ù–∏–∑"
                  value={element.style.padding?.bottom || 0}
                  onChange={(e) => handleElementSpacingChange('padding', 'bottom', parseInt(e.target.value))}
                  className="px-2 py-1 text-sm border border-gray-300 rounded"
                />
                <input
                  type="number"
                  placeholder="–õ–µ–≤–æ"
                  value={element.style.padding?.left || 0}
                  onChange={(e) => handleElementSpacingChange('padding', 'left', parseInt(e.target.value))}
                  className="px-2 py-1 text-sm border border-gray-300 rounded"
                />
                <input
                  type="number"
                  placeholder="–ü—Ä–∞–≤–æ"
                  value={element.style.padding?.right || 0}
                  onChange={(e) => handleElementSpacingChange('padding', 'right', parseInt(e.target.value))}
                  className="px-2 py-1 text-sm border border-gray-300 rounded"
                />
              </div>
            </div>
          </div>
        );

      case 'hero':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ Hero —Å–µ–∫—Ü–∏–∏"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <textarea
                value={element.props.subtitle || ''}
                onChange={(e) => handleElementPropChange('subtitle', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ Hero —Å–µ–∫—Ü–∏–∏"
                rows={3}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
              </label>
              <input
                type="text"
                value={element.props.buttonText || ''}
                onChange={(e) => handleElementPropChange('buttonText', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"
              />
            </div>
          </div>
        );

      case 'card':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <textarea
                value={element.props.description || ''}
                onChange={(e) => handleElementPropChange('description', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
                rows={3}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </label>
              <input
                type="url"
                value={element.props.imageUrl || ''}
                onChange={(e) => handleElementPropChange('imageUrl', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com/image.jpg"
              />
            </div>
          </div>
        );

      case 'header':
      case 'footer':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –õ–æ–≥–æ—Ç–∏–ø URL
              </label>
              <input
                type="url"
                value={element.props.logoUrl || ''}
                onChange={(e) => handleElementPropChange('logoUrl', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com/logo.png"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
              </label>
              <input
                type="text"
                value={element.props.menuItems?.join(', ') || ''}
                onChange={(e) => handleElementPropChange('menuItems', e.target.value.split(',').map(item => item.trim()))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ì–ª–∞–≤–Ω–∞—è, –û –Ω–∞—Å, –ö–æ–Ω—Ç–∞–∫—Ç—ã"
              />
            </div>
          </div>
        );

      case 'icon':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò–∫–æ–Ω–∫–∞ (—ç–º–æ–¥–∑–∏)
              </label>
              <input
                type="text"
                value={element.props.icon || '‚≠ê'}
                onChange={(e) => handleElementPropChange('icon', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="‚≠ê"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
              </label>
              <select
                value={element.props.size || 'medium'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
                <option value="xl">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</option>
              </select>
            </div>
          </div>
        );

      case 'badge':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–∫—Å—Ç –∑–Ω–∞—á–∫–∞
              </label>
              <input
                type="text"
                value={element.props.text || ''}
                onChange={(e) => handleElementPropChange('text', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–æ–≤–∏–Ω–∫–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–≤–µ—Ç –∑–Ω–∞—á–∫–∞
              </label>
              <select
                value={element.props.variant || 'red'}
                onChange={(e) => handleElementPropChange('variant', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="red">–ö—Ä–∞—Å–Ω—ã–π</option>
                <option value="blue">–°–∏–Ω–∏–π</option>
                <option value="green">–ó–µ–ª–µ–Ω—ã–π</option>
                <option value="yellow">–ñ–µ–ª—Ç—ã–π</option>
                <option value="purple">–§–∏–æ–ª–µ—Ç–æ–≤—ã–π</option>
                <option value="gray">–°–µ—Ä—ã–π</option>
              </select>
            </div>
          </div>
        );

      case 'contact':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.subtitle || ''}
                onChange={(e) => handleElementPropChange('subtitle', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <input
                type="text"
                value={element.props.phone || ''}
                onChange={(e) => handleElementPropChange('phone', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="+7 (999) 123-45-67"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Email
              </label>
              <input
                type="email"
                value={element.props.email || ''}
                onChange={(e) => handleElementPropChange('email', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="info@example.com"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ê–¥—Ä–µ—Å
              </label>
              <input
                type="text"
                value={element.props.address || ''}
                onChange={(e) => handleElementPropChange('address', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1"
              />
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showContactInfo !== false}
                  onChange={(e) => handleElementPropChange('showContactInfo', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showForm !== false}
                  onChange={(e) => handleElementPropChange('showForm', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</span>
              </label>
            </div>
          </div>
        );

      case 'accordion':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.subtitle || ''}
                onChange={(e) => handleElementPropChange('subtitle', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞–π–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
              />
            </div>
            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.allowMultiple || false}
                  onChange={(e) => handleElementPropChange('allowMultiple', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—Ü–∏–π</span>
              </label>
            </div>
          </div>
        );

      case 'gallery':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.subtitle || ''}
                onChange={(e) => handleElementPropChange('subtitle', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ
              </label>
              <select
                value={element.props.columns || 3}
                onChange={(e) => handleElementPropChange('columns', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={1}>1 –∫–æ–ª–æ–Ω–∫–∞</option>
                <option value={2}>2 –∫–æ–ª–æ–Ω–∫–∏</option>
                <option value={3}>3 –∫–æ–ª–æ–Ω–∫–∏</option>
                <option value={4}>4 –∫–æ–ª–æ–Ω–∫–∏</option>
                <option value={5}>5 –∫–æ–ª–æ–Ω–æ–∫</option>
                <option value={6}>6 –∫–æ–ª–æ–Ω–æ–∫</option>
              </select>
            </div>
            <div>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showCaptions || false}
                  onChange={(e) => handleElementPropChange('showCaptions', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º</span>
              </label>
            </div>
          </div>
        );

      // –ù–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ–æ—Ä–º
      case 'input':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
              </label>
              <input
                type="text"
                value={element.props.label || ''}
                onChange={(e) => handleElementPropChange('label', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Placeholder
              </label>
              <input
                type="text"
                value={element.props.placeholder || ''}
                onChange={(e) => handleElementPropChange('placeholder', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–∏–ø –ø–æ–ª—è
              </label>
              <select
                value={element.props.type || 'text'}
                onChange={(e) => handleElementPropChange('type', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="text">–¢–µ–∫—Å—Ç</option>
                <option value="number">–ß–∏—Å–ª–æ</option>
                <option value="email">Email</option>
                <option value="tel">–¢–µ–ª–µ—Ñ–æ–Ω</option>
                <option value="password">–ü–∞—Ä–æ–ª—å</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä
              </label>
              <select
                value={element.props.size || 'medium'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.required || false}
                  onChange={(e) => handleElementPropChange('required', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.disabled || false}
                  onChange={(e) => handleElementPropChange('disabled', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–û—Ç–∫–ª—é—á–µ–Ω–æ</span>
              </label>
            </div>
          </div>
        );

      case 'select':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
              </label>
              <input
                type="text"
                value={element.props.label || ''}
                onChange={(e) => handleElementPropChange('label', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Placeholder
              </label>
              <input
                type="text"
                value={element.props.placeholder || ''}
                onChange={(e) => handleElementPropChange('placeholder', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä
              </label>
              <select
                value={element.props.size || 'medium'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.required || false}
                  onChange={(e) => handleElementPropChange('required', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.disabled || false}
                  onChange={(e) => handleElementPropChange('disabled', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–û—Ç–∫–ª—é—á–µ–Ω–æ</span>
              </label>
            </div>
          </div>
        );

      case 'checkbox':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–µ–∫—Å—Ç —á–µ–∫–±–æ–∫—Å–∞
              </label>
              <input
                type="text"
                value={element.props.label || ''}
                onChange={(e) => handleElementPropChange('label', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–¢–µ–∫—Å—Ç —á–µ–∫–±–æ–∫—Å–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä
              </label>
              <select
                value={element.props.size || 'medium'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.checked || false}
                  onChange={(e) => handleElementPropChange('checked', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–º–µ—á–µ–Ω</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.disabled || false}
                  onChange={(e) => handleElementPropChange('disabled', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–û—Ç–∫–ª—é—á–µ–Ω–æ</span>
              </label>
            </div>
          </div>
        );

      case 'radio':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
              </label>
              <input
                type="text"
                value={element.props.label || ''}
                onChange={(e) => handleElementPropChange('label', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò–º—è –≥—Ä—É–ø–ø—ã
              </label>
              <input
                type="text"
                value={element.props.name || ''}
                onChange={(e) => handleElementPropChange('name', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="radio-group"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä
              </label>
              <select
                value={element.props.size || 'medium'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.disabled || false}
                  onChange={(e) => handleElementPropChange('disabled', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–û—Ç–∫–ª—é—á–µ–Ω–æ</span>
              </label>
            </div>
          </div>
        );

      case 'productFilter':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–§–∏–ª—å—Ç—Ä—ã"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
              </label>
              <div className="text-sm text-gray-500 mb-2">
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
              </div>
              <div className="space-y-2 max-h-32 overflow-y-auto border border-gray-200 rounded-lg p-2">
                {/* –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
                <div className="text-xs text-gray-400">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                </div>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
              </label>
              <select
                value={element.props.filterType || 'advanced'}
                onChange={(e) => handleElementPropChange('filterType', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="simple">–ü—Ä–æ—Å—Ç–æ–π</option>
                <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
                <option value="custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showPriceRange || true}
                  onChange={(e) => handleElementPropChange('showPriceRange', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω</span>
              </label>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showBrandFilter || true}
                  onChange={(e) => handleElementPropChange('showBrandFilter', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É</span>
              </label>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showColorFilter || true}
                  onChange={(e) => handleElementPropChange('showColorFilter', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–≤–µ—Ç—É</span>
              </label>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showMaterialFilter || true}
                  onChange={(e) => handleElementPropChange('showMaterialFilter', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É</span>
              </label>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í—ã—Å–æ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (px)
              </label>
              <input
                type="number"
                value={element.props.height || 400}
                onChange={(e) => handleElementPropChange('height', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="200"
                max="800"
              />
            </div>
          </div>
        );

      case 'propertyFilter':
        console.log('üö® PropertiesPanel: –†–µ–Ω–¥–µ—Ä–∏–º propertyFilter!', {
          elementType: element.type,
          elementId: element.id,
          elementProps: element.props,
          categoryIds: element.props.categoryIds,
          selectedPropertyIds: element.props.selectedPropertyIds
        });
        
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–§–∏–ª—å—Ç—Ä"
              />
            </div>

            {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
              </label>
              {loadingCategories ? (
                <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50">
                  <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
                </div>
              ) : (
                <CategoryTreeSelector
                  categories={categories}
                  selectedIds={element.props.categoryIds || []}
                  onSelectionChange={(selectedIds) => {
                    handleElementPropChange('categoryIds', selectedIds);
                  }}
                />
              )}
            </div>

            {/* –í—ã–±–æ—Ä —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
              </label>
              <ProductPropertiesSelector
                categoryIds={element.props.categoryIds || []}
                selectedPropertyIds={element.props.selectedPropertyIds || []}
                onPropertiesChange={(selectedPropertyIds) => {
                  console.log('üö® PropertiesPanel: onPropertiesChange –í–´–ó–í–ê–ù!', {
                    selectedPropertyIds,
                    availableProperties: availableProperties.length,
                    availablePropertiesList: availableProperties.map(p => ({ id: p.id, name: p.name })),
                    categoryIds: element.props.categoryIds,
                    elementType: element.type
                  });
                  
                  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                  const firstPropertyId = selectedPropertyIds[0];
                  if (firstPropertyId) {
                    // –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ ID
                    const property = availableProperties.find(p => p.id === firstPropertyId);
                    console.log('PropertiesPanel: –ü–æ–∏—Å–∫ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ ID:', firstPropertyId);
                    console.log('PropertiesPanel: –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ:', property);
                    console.log('PropertiesPanel: –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', availableProperties);
                    
                    if (property) {
                      console.log('PropertiesPanel: –û–±–Ω–æ–≤–ª—è–µ–º propertyName –Ω–∞:', property.name);
                      handleElementPropChange('propertyName', property.name);
                      handleElementPropChange('selectedPropertyIds', selectedPropertyIds);
                      
                      // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                      setTimeout(() => {
                        console.log('PropertiesPanel: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
                          elementProps: element.props,
                          propertyName: element.props.propertyName,
                          selectedPropertyIds: element.props.selectedPropertyIds
                        });
                      }, 100);
                    } else {
                      console.error('PropertiesPanel: –°–≤–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', availableProperties.map(p => p.id));
                      console.error('PropertiesPanel: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏...');
                      
                      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ –ø–æ –∏–º–µ–Ω–∏ (fallback)
                      const propertyName = selectedPropertyIds[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞
                      if (typeof propertyName === 'string') {
                        console.log('PropertiesPanel: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞–ø—Ä—è–º—É—é:', propertyName);
                        handleElementPropChange('propertyName', propertyName);
                        handleElementPropChange('selectedPropertyIds', selectedPropertyIds);
                      }
                    }
                  } else {
                    console.log('PropertiesPanel: –û—á–∏—â–∞–µ–º propertyName');
                    handleElementPropChange('propertyName', '');
                    handleElementPropChange('selectedPropertyIds', []);
                  }
                }}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°—Ç–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </label>
              <select
                value={element.props.displayStyle || 'cards'}
                onChange={(e) => handleElementPropChange('displayStyle', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="cards">–ö–∞—Ä—Ç–æ—á–∫–∏</option>
                <option value="buttons">–ö–Ω–æ–ø–∫–∏</option>
                <option value="list">–°–ø–∏—Å–æ–∫</option>
              </select>
            </div>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */}
            {element.props.displayStyle === 'cards' && (
              <>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
                  </label>
                  <select
                    value={element.props.cardSize || 'medium'}
                    onChange={(e) => handleElementPropChange('cardSize', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–µ (100x80px)</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–∏–µ (150x120px)</option>
                    <option value="large">–ë–æ–ª—å—à–∏–µ (200x160px)</option>
                    <option value="xlarge">–û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ (250x200px)</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
                  </label>
                  <div className="space-y-2">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          const reader = new FileReader();
                          reader.onload = (event) => {
                            handleElementPropChange('cardImage', event.target?.result);
                          };
                          reader.readAsDataURL(file);
                        }
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    {element.props.cardImage && (
                      <div className="mt-2">
                        <img 
                          src={element.props.cardImage} 
                          alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" 
                          className="w-20 h-16 object-cover rounded border"
                        />
                        <button
                          onClick={() => handleElementPropChange('cardImage', '')}
                          className="ml-2 text-red-600 text-sm hover:text-red-800"
                        >
                          –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    )}
                    <div className="text-xs text-gray-500">
                      –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
                    </div>
                    <input
                      type="url"
                      value={element.props.cardImageUrl || ''}
                      onChange={(e) => handleElementPropChange('cardImageUrl', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="https://example.com/image.jpg"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
                  </label>
                  <select
                    value={element.props.columns || 'auto'}
                    onChange={(e) => handleElementPropChange('columns', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="auto">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</option>
                    <option value="1">1 –∫–æ–ª–æ–Ω–∫–∞</option>
                    <option value="2">2 –∫–æ–ª–æ–Ω–∫–∏</option>
                    <option value="3">3 –∫–æ–ª–æ–Ω–∫–∏</option>
                    <option value="4">4 –∫–æ–ª–æ–Ω–∫–∏</option>
                    <option value="5">5 –∫–æ–ª–æ–Ω–æ–∫</option>
                  </select>
                </div>
              </>
            )}

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í—ã—Å–æ—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (px)
              </label>
              <input
                type="number"
                value={element.props.height || 300}
                onChange={(e) => handleElementPropChange('height', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="200"
                max="800"
              />
            </div>
          </div>
        );

      case 'filteredProducts':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–¢–æ–≤–∞—Ä—ã"
              />
            </div>

            {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
              </label>
              {loadingCategories ? (
                <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50">
                  <div className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
                </div>
              ) : (
                <CategoryTreeSelector
                  categories={categories}
                  selectedIds={element.props.categoryIds || []}
                  onSelectionChange={(selectedIds) => {
                    handleElementPropChange('categoryIds', selectedIds);
                  }}
                />
              )}
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤
              </label>
              <input
                type="number"
                value={element.props.limit || 12}
                onChange={(e) => handleElementPropChange('limit', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="1"
                max="50"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ú–∞–∫–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </label>
              <select
                value={element.props.layout || 'grid'}
                onChange={(e) => handleElementPropChange('layout', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="grid">–°–µ—Ç–∫–∞</option>
                <option value="list">–°–ø–∏—Å–æ–∫</option>
                <option value="compact">–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showAddToCart !== false}
                  onChange={(e) => handleElementPropChange('showAddToCart', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í –∫–æ—Ä–∑–∏–Ω—É"</span>
              </label>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í—ã—Å–æ—Ç–∞ (px)
              </label>
              <input
                type="number"
                value={element.props.height || 500}
                onChange={(e) => handleElementPropChange('height', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                min="300"
                max="800"
              />
            </div>
          </div>
        );

      // –¢–æ–≤–∞—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      case 'productCard':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–µ–Ω–∞
              </label>
              <input
                type="text"
                value={element.props.price || ''}
                onChange={(e) => handleElementPropChange('price', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0 ‚ÇΩ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
              </label>
              <input
                type="text"
                value={element.props.originalPrice || ''}
                onChange={(e) => handleElementPropChange('originalPrice', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0 ‚ÇΩ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              </label>
              <input
                type="text"
                value={element.props.image || ''}
                onChange={(e) => handleElementPropChange('image', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="/placeholder-product.jpg"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–Ω–∞—á–æ–∫ —Å–∫–∏–¥–∫–∏
              </label>
              <input
                type="text"
                value={element.props.badge || ''}
                onChange={(e) => handleElementPropChange('badge', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="-20%"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ú–∞–∫–µ—Ç
              </label>
              <select
                value={element.props.layout || 'vertical'}
                onChange={(e) => handleElementPropChange('layout', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="vertical">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π</option>
                <option value="horizontal">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä
              </label>
              <select
                value={element.props.size || 'medium'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showBadge || false}
                  onChange={(e) => handleElementPropChange('showBadge', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–æ–∫ —Å–∫–∏–¥–∫–∏</span>
              </label>
            </div>
          </div>
        );

      case 'productGallery':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ú–∞–∫–µ—Ç –≥–∞–ª–µ—Ä–µ–∏
              </label>
              <select
                value={element.props.layout || 'grid'}
                onChange={(e) => handleElementPropChange('layout', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="grid">–°–µ—Ç–∫–∞</option>
                <option value="carousel">–ö–∞—Ä—É—Å–µ–ª—å</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showThumbnails !== false}
                  onChange={(e) => handleElementPropChange('showThumbnails', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showNavigation !== false}
                  onChange={(e) => handleElementPropChange('showNavigation', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é</span>
              </label>
            </div>
          </div>
        );

      case 'productGrid':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
              </label>
              <input
                type="text"
                value={element.props.subtitle || ''}
                onChange={(e) => handleElementPropChange('subtitle', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
              </label>
              <select
                value={element.props.limit || 12}
                onChange={(e) => handleElementPropChange('limit', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={4}>4 —Ç–æ–≤–∞—Ä–∞</option>
                <option value={8}>8 —Ç–æ–≤–∞—Ä–æ–≤</option>
                <option value={12}>12 —Ç–æ–≤–∞—Ä–æ–≤</option>
                <option value={16}>16 —Ç–æ–≤–∞—Ä–æ–≤</option>
                <option value={20}>20 —Ç–æ–≤–∞—Ä–æ–≤</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ö–æ–ª–æ–Ω–∫–∏ –≤ —Å–µ—Ç–∫–µ
              </label>
              <select
                value={element.props.columns || 4}
                onChange={(e) => handleElementPropChange('columns', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value={1}>1 –∫–æ–ª–æ–Ω–∫–∞</option>
                <option value={2}>2 –∫–æ–ª–æ–Ω–∫–∏</option>
                <option value={3}>3 –∫–æ–ª–æ–Ω–∫–∏</option>
                <option value={4}>4 –∫–æ–ª–æ–Ω–∫–∏</option>
                <option value={5}>5 –∫–æ–ª–æ–Ω–æ–∫</option>
                <option value={6}>6 –∫–æ–ª–æ–Ω–æ–∫</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showProperties !== false}
                  onChange={(e) => handleElementPropChange('showProperties', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showDescription !== false}
                  onChange={(e) => handleElementPropChange('showDescription', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showBadges !== false}
                  onChange={(e) => handleElementPropChange('showBadges', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showSku !== false}
                  onChange={(e) => handleElementPropChange('showSku', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å SKU</span>
              </label>
            </div>
          </div>
        );

      case 'productDetails':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–µ–Ω–∞
              </label>
              <input
                type="text"
                value={element.props.price || ''}
                onChange={(e) => handleElementPropChange('price', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0 ‚ÇΩ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
              </label>
              <input
                type="text"
                value={element.props.originalPrice || ''}
                onChange={(e) => handleElementPropChange('originalPrice', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0 ‚ÇΩ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û–ø–∏—Å–∞–Ω–∏–µ
              </label>
              <textarea
                value={element.props.description || ''}
                onChange={(e) => handleElementPropChange('description', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                rows={3}
                placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ú–∞–∫–µ—Ç
              </label>
              <select
                value={element.props.layout || 'vertical'}
                onChange={(e) => handleElementPropChange('layout', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="vertical">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π</option>
                <option value="horizontal">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showPrice !== false}
                  onChange={(e) => handleElementPropChange('showPrice', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ü–µ–Ω—É</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showDescription !== false}
                  onChange={(e) => handleElementPropChange('showDescription', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showSpecifications !== false}
                  onChange={(e) => handleElementPropChange('showSpecifications', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</span>
              </label>
            </div>
          </div>
        );

      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      case 'priceDisplay':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –¶–µ–Ω–∞
              </label>
              <input
                type="text"
                value={element.props.price || ''}
                onChange={(e) => handleElementPropChange('price', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0 ‚ÇΩ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
              </label>
              <input
                type="text"
                value={element.props.originalPrice || ''}
                onChange={(e) => handleElementPropChange('originalPrice', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="0 ‚ÇΩ"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°–∫–∏–¥–∫–∞
              </label>
              <input
                type="text"
                value={element.props.discount || ''}
                onChange={(e) => handleElementPropChange('discount', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="-20%"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –†–∞–∑–º–µ—Ä
              </label>
              <select
                value={element.props.size || 'large'}
                onChange={(e) => handleElementPropChange('size', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="large">–ë–æ–ª—å—à–æ–π</option>
                <option value="xlarge">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
              </label>
              <select
                value={element.props.layout || 'center'}
                onChange={(e) => handleElementPropChange('layout', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="left">–ü–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é</option>
                <option value="center">–ü–æ —Ü–µ–Ω—Ç—Ä—É</option>
                <option value="right">–ü–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –§–æ–Ω
              </label>
              <select
                value={element.props.backgroundColor || 'transparent'}
                onChange={(e) => handleElementPropChange('backgroundColor', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="transparent">–ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π</option>
                <option value="white">–ë–µ–ª—ã–π</option>
                <option value="gray">–°–µ—Ä—ã–π</option>
                <option value="blue">–ì–æ–ª—É–±–æ–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showDiscount || false}
                  onChange={(e) => handleElementPropChange('showDiscount', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∫–∏–¥–∫—É</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showCurrency !== false}
                  onChange={(e) => handleElementPropChange('showCurrency', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–ª—é—Ç—É</span>
              </label>
            </div>
          </div>
        );

      case 'summaryTable':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
              </label>
              <input
                type="text"
                value={element.props.title || ''}
                onChange={(e) => handleElementPropChange('title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°—Ç–∏–ª—å —Ç–∞–±–ª–∏—Ü—ã
              </label>
              <select
                value={element.props.style || 'default'}
                onChange={(e) => handleElementPropChange('style', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="default">–û–±—ã—á–Ω—ã–π</option>
                <option value="minimal">–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</option>
                <option value="highlighted">–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π</option>
              </select>
            </div>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showHeader !== false}
                  onChange={(e) => handleElementPropChange('showHeader', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫</span>
              </label>
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={element.props.showFooter !== false}
                  onChange={(e) => handleElementPropChange('showFooter', e.target.checked)}
                  className="mr-2 w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥–≤–∞–ª</span>
              </label>
            </div>
          </div>
        );

      case 'featureStatus':
        return (
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π
              </label>
              <div className="text-xs text-gray-500 mb-2">
                –î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Ö —Å—Ç–∞—Ç—É—Å–∞
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="block text-sm font-medium text-gray-700">
                –§—É–Ω–∫—Ü–∏–∏ (JSON):
              </label>
              <textarea
                value={JSON.stringify(element.props.features || [
                  {
                    name: "–î–µ—Ä–µ–≤–æ –∫–∞—Ç–∞–ª–æ–≥–∞",
                    status: "working",
                    description: "–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"
                  },
                  {
                    name: "–°–∏—Å—Ç–µ–º–∞ —Å–≤—è–∑–µ–π",
                    status: "working", 
                    description: "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"
                  },
                  {
                    name: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫",
                    status: "working",
                    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"
                  }
                ], null, 2)}
                onChange={(e) => {
                  try {
                    const features = JSON.parse(e.target.value);
                    handleElementPropChange('features', features);
                  } catch (error) {
                    console.error('Invalid JSON:', error);
                  }
                }}
                className="w-full h-64 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs"
                placeholder="–í–≤–µ–¥–∏—Ç–µ JSON —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏..."
              />
            </div>
          </div>
        );

      default:
        return (
          <div className="text-center text-gray-500 py-8">
            <div className="text-4xl mb-4">‚öôÔ∏è</div>
            <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
          </div>
        );
    }
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∏–ª–µ–π
  const renderStyleTab = () => {
    if (!element) return null;

    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç
          </label>
          <input
            type="color"
            value={element.style.backgroundColor || '#ffffff'}
            onChange={(e) => handleElementStyleChange('backgroundColor', e.target.value)}
            className="w-full h-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
          </label>
          <input
            type="color"
            value={element.style.borderColor || '#000000'}
            onChange={(e) => handleElementStyleChange('borderColor', e.target.value)}
            className="w-full h-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
          </label>
          <input
            type="number"
            value={element.style.borderWidth || 0}
            onChange={(e) => handleElementStyleChange('borderWidth', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min="0"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤
          </label>
          <input
            type="number"
            value={element.style.borderRadius || 0}
            onChange={(e) => handleElementStyleChange('borderRadius', parseInt(e.target.value))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            min="0"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
          </label>
          <input
            type="range"
            value={element.style.opacity || 1}
            onChange={(e) => handleElementStyleChange('opacity', parseFloat(e.target.value))}
            className="w-full"
            min="0"
            max="1"
            step="0.1"
          />
          <div className="text-xs text-gray-500 text-center">
            {Math.round((element.style.opacity || 1) * 100)}%
          </div>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ –º–∞–∫–µ—Ç–∞
  const renderLayoutTab = () => {
    if (!element) return null;

    return (
      <div className="space-y-4">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              X
            </label>
            <input
              type="number"
              value={element.position.x}
              onChange={(e) => handleElementPositionChange('x', parseInt(e.target.value))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Y
            </label>
            <input
              type="number"
              value={element.position.y}
              onChange={(e) => handleElementPositionChange('y', parseInt(e.target.value))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –®–∏—Ä–∏–Ω–∞
            </label>
            <input
              type="number"
              value={element.size.width}
              onChange={(e) => handleElementSizeChange('width', parseInt(e.target.value))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              min={element.constraints.minWidth}
              max={element.constraints.maxWidth}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –í—ã—Å–æ—Ç–∞
            </label>
            <input
              type="number"
              value={element.size.height}
              onChange={(e) => handleElementSizeChange('height', parseInt(e.target.value))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              min={element.constraints.minHeight}
              max={element.constraints.maxHeight}
            />
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">–û—Ç—Å—Ç—É–ø—ã</h4>
          <div className="grid grid-cols-2 gap-2">
            <div>
              <label className="block text-xs text-gray-600 mb-1">–í–µ—Ä—Ö</label>
              <input
                type="number"
                value={element.style.padding?.top || 0}
                onChange={(e) => handleSpacingChange('padding', 'top', parseInt(e.target.value))}
                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-xs text-gray-600 mb-1">–ü—Ä–∞–≤–æ</label>
              <input
                type="number"
                value={element.style.padding?.right || 0}
                onChange={(e) => handleSpacingChange('padding', 'right', parseInt(e.target.value))}
                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-xs text-gray-600 mb-1">–ù–∏–∑</label>
              <input
                type="number"
                value={element.style.padding?.bottom || 0}
                onChange={(e) => handleSpacingChange('padding', 'bottom', parseInt(e.target.value))}
                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-xs text-gray-600 mb-1">–õ–µ–≤–æ</label>
              <input
                type="number"
                value={element.style.padding?.left || 0}
                onChange={(e) => handleSpacingChange('padding', 'left', parseInt(e.target.value))}
                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
              />
            </div>
          </div>
        </div>
      </div>
    );
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const renderPageTab = () => {
    if (!page) return null;

    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </label>
          <input
            type="text"
            value={page.name}
            onChange={(e) => onUpdatePage({ name: e.target.value })}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          </label>
          <input
            type="color"
            value={page.settings.backgroundColor}
            onChange={(e) => handlePageSettingChange('backgroundColor', e.target.value)}
            className="w-full h-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –®–∏—Ä–∏–Ω–∞
            </label>
            <input
              type="number"
              value={page.settings.width}
              onChange={(e) => handlePageSettingChange('width', parseInt(e.target.value))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –í—ã—Å–æ—Ç–∞
            </label>
            <input
              type="number"
              value={page.settings.height}
              onChange={(e) => handlePageSettingChange('height', parseInt(e.target.value))}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="w-80 bg-white border-l border-gray-200 flex flex-col">
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900">
          {element ? '–°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞' : '–°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'}
        </h3>
      </div>

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <div className="flex">
          {element && (
            <>
              <button
                onClick={() => setActiveTab('content')}
                className={`px-2 py-2 text-xs font-medium ${
                  activeTab === 'content'
                    ? 'text-blue-600 border-b-2 border-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                –ö–æ–Ω—Ç–µ–Ω—Ç
              </button>
              <button
                onClick={() => setActiveTab('style')}
                className={`px-2 py-2 text-xs font-medium ${
                  activeTab === 'style'
                    ? 'text-blue-600 border-b-2 border-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                –°—Ç–∏–ª–∏
              </button>
              <button
                onClick={() => setActiveTab('layout')}
                className={`px-2 py-2 text-xs font-medium ${
                  activeTab === 'layout'
                    ? 'text-blue-600 border-b-2 border-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                –ú–∞–∫–µ—Ç
              </button>
            </>
          )}
          <button
            onClick={() => setActiveTab('page')}
            className={`px-2 py-2 text-xs font-medium ${
              activeTab === 'page'
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            –°—Ç—Ä–∞–Ω–∏—Ü–∞
          </button>
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-4">
        {activeTab === 'content' && renderContentTab()}
        {activeTab === 'style' && renderStyleTab()}
        {activeTab === 'layout' && renderLayoutTab()}
        {activeTab === 'page' && renderPageTab()}
      </div>
    </div>
  );
}
