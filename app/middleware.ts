import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';

// –ü—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const protectedPaths = ['/complectator', '/executor'];
const publicPaths = ['/login', '/', '/dashboard', '/admin'];

// –ü—É—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
const adminOnlyPaths = [
  '/admin/users',
  '/admin/settings',
  '/admin/analytics',
  '/admin/notifications-demo'
];

// –ü—É—Ç–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–æ–≤
const complectatorPaths = [
  '/admin/categories',
  '/admin/categories/builder',
  '/admin/catalog'
];

// –ü—É—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
const executorPaths = [
  '/admin/catalog'
];

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
  const isProtectedPath = protectedPaths.some(path => pathname.startsWith(path));
  
  if (!isProtectedPath) {
    return NextResponse.next();
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
  const token = request.cookies.get('auth-token')?.value;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.error('üîê MIDDLEWARE: Auth check:', pathname, 'Token:', !!token, 'Length:', token?.length);
  
  if (!token) {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(loginUrl);
  }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      const jwtSecret = process.env.JWT_SECRET;
      if (!jwtSecret) {
        console.error('JWT_SECRET environment variable is required');
        return NextResponse.redirect(new URL('/login', request.url));
      }
      console.log('üîê Verifying token with secret length:', jwtSecret.length);
      
      const decoded = jwt.verify(token, jwtSecret) as { role?: string; userId?: string; email?: string };
      console.log('‚úÖ Token verified successfully:', { role: decoded.role, userId: decoded.userId });
    
    const userRole = decoded.role?.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if (pathname.startsWith('/admin')) {
      // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      if (!['admin', 'complectator', 'executor'].includes(userRole)) {
        return NextResponse.redirect(new URL('/auth/unauthorized', request.url));
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-—Ç–æ–ª—å–∫–æ –ø—É—Ç—è–º
    if (adminOnlyPaths.some(path => pathname.startsWith(path))) {
      if (userRole !== 'admin') {
        return NextResponse.redirect(new URL('/auth/unauthorized', request.url));
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ç–æ—Ä–æ–≤
    if (complectatorPaths.some(path => pathname.startsWith(path))) {
      if (!['admin', 'complectator'].includes(userRole)) {
        return NextResponse.redirect(new URL('/auth/unauthorized', request.url));
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    if (executorPaths.some(path => pathname.startsWith(path))) {
      if (!['admin', 'executor'].includes(userRole)) {
        return NextResponse.redirect(new URL('/auth/unauthorized', request.url));
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const requestHeaders = new Headers(request.headers);
    requestHeaders.set('x-user-id', decoded.userId);
    requestHeaders.set('x-user-role', userRole);

    return NextResponse.next({
      request: {
        headers: requestHeaders,
      },
    });

  } catch (error) {
    // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    const loginUrl = new URL('/login', request.url);
    loginUrl.searchParams.set('redirect', pathname);
    return NextResponse.redirect(loginUrl);
  }
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public (public files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|public).*)',
  ],
};