import { NextRequest, NextResponse } from "next/server";
import { productImportService } from '../../../../lib/services/product-import.service';
import { safeLog, logDebug, safeLogError } from '../../../../lib/utils/logger';

export async function POST(req: NextRequest) {
  try {
    logDebug('API universal-import - –Ω–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞');
    
    const formData = await req.formData();
    const file = formData.get('file') as File;
    const catalogCategoryId = formData.get('catalogCategoryId') as string;
    
    if (!file) {
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      );
    }

    if (!catalogCategoryId) {
      return NextResponse.json(
        { error: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞' },
        { status: 400 }
      );
    }

    safeLog(`üìÅ –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: ${file.name}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç`);
    safeLog(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${catalogCategoryId}`);

    const buffer = await file.arrayBuffer();
    const result = await productImportService.importFromExcel(
      buffer,
      catalogCategoryId
    );

    if (result.success) {
      safeLog(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${result.imported} —Ç–æ–≤–∞—Ä–æ–≤`);
      return NextResponse.json({
        success: true,
        message: `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.imported} —Ç–æ–≤–∞—Ä–æ–≤`,
        imported: result.imported,
        errors: result.errors
      });
    } else {
      safeLogError('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', result.message);
      return NextResponse.json({
        success: false,
        message: result.message,
        imported: result.imported,
        errors: result.errors
      }, { status: 400 });
    }
  } catch (error) {
    safeLogError('‚ùå API universal-import - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { 
        error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
