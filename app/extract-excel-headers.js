const XLSX = require('xlsx');
const path = require('path');

async function extractExcelHeaders() {
  try {
    console.log('üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞...\n');
    
    // –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    const excelPath = path.join(__dirname, '..', '–ø—Ä–∞–π—Å', '–ü—Ä–∞–π—Å –î–≤–µ—Ä–∏ 01.xlsx');
    
    console.log('üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É:', excelPath);
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const workbook = XLSX.readFile(excelPath);
    
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:', workbook.SheetNames);
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç (–æ–±—ã—á–Ω–æ "–ö–∞—Ç–∞–ª–æ–≥" –∏–ª–∏ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç)
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    console.log(`üìÑ –†–∞–±–æ—Ç–∞–µ–º —Å –ª–∏—Å—Ç–æ–º: "${sheetName}"\n`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
    const range = XLSX.utils.decode_range(worksheet['!ref']);
    console.log(`üìä –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö: ${worksheet['!ref']}`);
    console.log(`üìä –°—Ç—Ä–æ–∫: ${range.e.r + 1}, –ö–æ–ª–æ–Ω–æ–∫: ${range.e.c + 1}\n`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    const headers = [];
    for (let col = range.s.c; col <= range.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: range.s.r, c: col });
      const cell = worksheet[cellAddress];
      const header = cell ? cell.v : '';
      headers.push(header);
    }
    
    console.log('üè∑Ô∏è –ó–ê–ì–û–õ–û–í–ö–ò –ö–û–õ–û–ù–û–ö:');
    console.log('='.repeat(50));
    
    headers.forEach((header, index) => {
      const columnLetter = String.fromCharCode(65 + index); // A, B, C, ...
      console.log(`${columnLetter.padEnd(3)}: "${header}"`);
    });
    
    console.log('='.repeat(50));
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headers.length}\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ç–∏–ø–∞–º
    console.log('üìã –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ó–ê–ì–û–õ–û–í–ö–û–í:');
    console.log('='.repeat(50));
    
    const grouped = {
      '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è': [],
      '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': [],
      '–†–∞–∑–º–µ—Ä—ã': [],
      '–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': [],
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ': [],
      '–ü—É—Å—Ç—ã–µ': []
    };
    
    headers.forEach((header, index) => {
      const columnLetter = String.fromCharCode(65 + index);
      const headerStr = String(header).trim();
      
      if (!headerStr) {
        grouped['–ü—É—Å—Ç—ã–µ'].push(`${columnLetter}: "${headerStr}"`);
      } else if (headerStr.toLowerCase().includes('–∞—Ä—Ç–∏–∫—É–ª') || 
                 headerStr.toLowerCase().includes('–Ω–æ–º–µ—Ä') ||
                 headerStr.toLowerCase().includes('–∫–æ–¥')) {
        grouped['–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'].push(`${columnLetter}: "${headerStr}"`);
      } else if (headerStr.toLowerCase().includes('–º–æ–¥–µ–ª—å') ||
                 headerStr.toLowerCase().includes('—Å—Ç–∏–ª—å') ||
                 headerStr.toLowerCase().includes('–ø–æ–∫—Ä—ã—Ç–∏–µ') ||
                 headerStr.toLowerCase().includes('—Ü–≤–µ—Ç') ||
                 headerStr.toLowerCase().includes('—Ç–∏–ø') ||
                 headerStr.toLowerCase().includes('–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è') ||
                 headerStr.toLowerCase().includes('—Ñ–∞–±—Ä–∏–∫–∞') ||
                 headerStr.toLowerCase().includes('–∫–æ–ª–ª–µ–∫—Ü–∏—è')) {
        grouped['–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'].push(`${columnLetter}: "${headerStr}"`);
      } else if (headerStr.toLowerCase().includes('—à–∏—Ä–∏–Ω–∞') ||
                 headerStr.toLowerCase().includes('–≤—ã—Å–æ—Ç–∞') ||
                 headerStr.toLowerCase().includes('—Ç–æ–ª—â–∏–Ω–∞') ||
                 headerStr.toLowerCase().includes('/–º–º')) {
        grouped['–†–∞–∑–º–µ—Ä—ã'].push(`${columnLetter}: "${headerStr}"`);
      } else if (headerStr.toLowerCase().includes('—Ü–µ–Ω–∞') ||
                 headerStr.toLowerCase().includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') ||
                 headerStr.toLowerCase().includes('—Ä—Ä—Ü')) {
        grouped['–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'].push(`${columnLetter}: "${headerStr}"`);
      } else {
        grouped['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ'].push(`${columnLetter}: "${headerStr}"`);
      }
    });
    
    Object.entries(grouped).forEach(([category, items]) => {
      if (items.length > 0) {
        console.log(`\n${category}:`);
        items.forEach(item => console.log(`  ${item}`));
      }
    });
    
    console.log('\n' + '='.repeat(50));
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è API
    console.log('\nüîß –ú–ê–ü–ü–ò–ù–ì –î–õ–Ø API:');
    console.log('='.repeat(50));
    
    const apiMapping = {};
    headers.forEach((header, index) => {
      const headerStr = String(header).trim();
      if (headerStr) {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è API
        const key = headerStr
          .toLowerCase()
          .replace(/[^a-z–∞-—è0-9]/g, '_')
          .replace(/_+/g, '_')
          .replace(/^_|_$/g, '');
        
        apiMapping[key] = headerStr;
      }
    });
    
    console.log('export const EXCEL_HEADERS = {');
    Object.entries(apiMapping).forEach(([key, value]) => {
      console.log(`  ${key.toUpperCase()}: '${value}',`);
    });
    console.log('} as const;\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
    console.log('üìä –ü–ï–†–í–´–ï –°–¢–†–û–ö–ò –î–ê–ù–ù–´–•:');
    console.log('='.repeat(50));
    
    for (let row = 1; row <= Math.min(3, range.e.r); row++) {
      console.log(`\n–°—Ç—Ä–æ–∫–∞ ${row + 1}:`);
      for (let col = range.s.c; col <= Math.min(range.s.c + 5, range.e.c); col++) {
        const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
        const cell = worksheet[cellAddress];
        const value = cell ? cell.v : '';
        const columnLetter = String.fromCharCode(65 + col);
        console.log(`  ${columnLetter}: "${value}"`);
      }
      if (range.e.c > range.s.c + 5) {
        console.log(`  ... (–µ—â–µ ${range.e.c - range.s.c - 5} –∫–æ–ª–æ–Ω–æ–∫)`);
      }
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error);
  }
}

extractExcelHeaders();

